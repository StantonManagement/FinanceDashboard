{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Property Management Dashboard - Stanton Management LLC\n\n## Project Architecture\nAn institutional-grade property management dashboard with Excel processing, GL account review, and professional financial reporting capabilities.\n\n### Core Technology Stack\n- Frontend: React + Vite + TypeScript\n- Backend: Express.js + Node.js  \n- Styling: Tailwind CSS + shadcn/ui\n- Data Processing: SheetJS (xlsx) for Excel files\n- State Management: TanStack Query + React hooks\n- Storage: In-memory (MemStorage) initially\n\n### Visual Design Requirements\n- **CRITICAL**: Institutional financial software appearance (Bloomberg Terminal style)\n- **NO consumer app styling**: No colored cards, rounded corners, or playful elements\n- **Typography**: Inter font, 18px minimum for screen sharing, monospace for data\n- **Color Scheme**: Professional grays/whites only (#1a1d21, #374151, #ffffff)\n- **Layout**: Table-based data presentation, not card-based\n\n## User Preferences\n- **Primary Goal**: Accounting verification with GL categorization and note-taking\n- **Secondary Goals**: Lender export packages, operational monitoring\n- **Screen Sharing Optimized**: Large fonts, clear click feedback, professional appearance\n- **Focus Property**: Hartford 1 portfolio (6 units at 228 Maple) as primary example\n\n## Recent Changes\n- Initial project setup with attached requirements and visual specifications\n- Detailed institutional styling guidelines provided\n- Excel data structure analyzed (>>Balance, >>LastMnth, >>T12 sheets)\n- Cash Flow Detail tab implemented with all non-zero GL line items\n- Improved table styling with alternating row colors and compact rows\n- Added interactive note-taking and action item flagging system\n- **Complete three-tier commenting system implemented**:\n  - Accounting comments (yellow highlighting, internal audit)\n  - Property Management comments (blue highlighting, operations)\n  - External/Lender comments (numbered badges, footnotes)\n- **Property-specific numbering**: S0010-001, S0010-002 format for multi-portfolio scaling\n- **Dedicated dashboards**: Accounting Notes (/accounting-notes) and Property Management (/property-management-notes)\n- **Navigation system**: Back buttons and header navigation between all dashboards\n- **Comment completion workflow**: Mark completed with detailed completion notes\n\n## Advanced Features Required\n- **Balance Sheet Analysis**: Asset tracking, debt analysis, equity positions, DSCR calculations\n- **T12 Performance**: Trailing 12-month trends, YoY growth, seasonal patterns, volatility analysis  \n- **Month-over-Month**: Current performance, variance analysis, expense breakdowns, trend indicators\n- **Advanced Statistics**: Revenue volatility, risk-adjusted returns, correlation analysis, predictive forecasting\n- **Smart Features**: Automated alerts, color-coded indicators, interactive charts, executive reporting\n\n## Data Structure\n### Hartford 1 Sample Data\n- Property: S0010 - 228 Maple (6 units)\n- Portfolio: Hartford 1\n- Key GL Accounts: 4105 (Rent Income), 6110 (Maintenance), etc.\n- Monthly NOI: ~$7,080\n- Avg Rent/Unit: $1,700\n\n## Implementation Priority\n1. Professional institutional styling (table-based layout)\n2. Hartford 1 data tables with GL account detail\n3. Note-taking system for accounting review\n4. Click highlighting for screen sharing\n5. Export functionality for lender packages","size_bytes":3352},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { updateStorageWithExcelData } from \"./excel-loader\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Load real Excel data on startup\n  await updateStorageWithExcelData();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2205},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { insertNoteSchema, insertActionItemSchema, insertExcelFileSchema } from \"@shared/schema\";\n\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  fileFilter: (req, file, cb) => {\n    // Accept Excel files only\n    if (file.mimetype === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ||\n        file.mimetype === 'application/vnd.ms-excel') {\n      cb(null, true);\n    } else {\n      cb(new Error('Only Excel files are allowed'), false);\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Portfolios\n  app.get(\"/api/portfolios\", async (req, res) => {\n    try {\n      const portfolios = await storage.getAllPortfolios();\n      res.json(portfolios);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch portfolios\" });\n    }\n  });\n\n  app.get(\"/api/portfolios/:key\", async (req, res) => {\n    try {\n      const portfolio = await storage.getPortfolioByKey(req.params.key);\n      if (!portfolio) {\n        return res.status(404).json({ message: \"Portfolio not found\" });\n      }\n      res.json(portfolio);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch portfolio\" });\n    }\n  });\n\n  // Properties\n  app.get(\"/api/properties\", async (req, res) => {\n    try {\n      const { portfolioId } = req.query;\n      if (portfolioId) {\n        const properties = await storage.getPropertiesByPortfolio(portfolioId as string);\n        res.json(properties);\n      } else {\n        const properties = await storage.getAllProperties();\n        res.json(properties);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch properties\" });\n    }\n  });\n\n  app.get(\"/api/properties/:code\", async (req, res) => {\n    try {\n      const property = await storage.getPropertyByCode(req.params.code);\n      if (!property) {\n        return res.status(404).json({ message: \"Property not found\" });\n      }\n      res.json(property);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch property\" });\n    }\n  });\n\n  // GL Accounts\n  app.get(\"/api/properties/:propertyId/gl-accounts\", async (req, res) => {\n    try {\n      const { month } = req.query;\n      const glAccounts = await storage.getGLAccountsByProperty(\n        req.params.propertyId, \n        month as string | undefined\n      );\n      res.json(glAccounts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch GL accounts\" });\n    }\n  });\n\n  // Notes\n  app.get(\"/api/properties/:propertyId/notes\", async (req, res) => {\n    try {\n      const notes = await storage.getNotesByProperty(req.params.propertyId);\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notes\" });\n    }\n  });\n\n  app.post(\"/api/notes\", async (req, res) => {\n    try {\n      const validated = insertNoteSchema.parse(req.body);\n      const note = await storage.createNote(validated);\n      res.status(201).json(note);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid note data\", error: error });\n    }\n  });\n\n  app.put(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const updates = insertNoteSchema.partial().parse(req.body);\n      const note = await storage.updateNote(req.params.id, updates);\n      if (!note) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n      res.json(note);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid note data\", error: error });\n    }\n  });\n\n  app.delete(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteNote(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete note\" });\n    }\n  });\n\n  // Action Items\n  app.get(\"/api/action-items\", async (req, res) => {\n    try {\n      const { propertyId } = req.query;\n      if (propertyId) {\n        const items = await storage.getActionItemsByProperty(propertyId as string);\n        res.json(items);\n      } else {\n        const items = await storage.getAllActionItems();\n        res.json(items);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch action items\" });\n    }\n  });\n\n  app.post(\"/api/action-items\", async (req, res) => {\n    try {\n      const validated = insertActionItemSchema.parse(req.body);\n      const item = await storage.createActionItem(validated);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid action item data\", error: error });\n    }\n  });\n\n  app.put(\"/api/action-items/:id\", async (req, res) => {\n    try {\n      const updates = insertActionItemSchema.partial().parse(req.body);\n      const item = await storage.updateActionItem(req.params.id, updates);\n      if (!item) {\n        return res.status(404).json({ message: \"Action item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid action item data\", error: error });\n    }\n  });\n\n  app.delete(\"/api/action-items/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteActionItem(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Action item not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete action item\" });\n    }\n  });\n\n  // Excel Upload\n  app.post(\"/api/excel/upload\", upload.single('excel'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No Excel file uploaded\" });\n      }\n\n      const excelFile = await storage.createExcelFile({\n        filename: req.file.originalname,\n        processedData: null // Will be processed by frontend\n      });\n\n      res.json({ \n        message: \"Excel file uploaded successfully\", \n        fileId: excelFile.id,\n        filename: excelFile.filename,\n        fileBuffer: req.file.buffer.toString('base64')\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to upload Excel file\", error: error });\n    }\n  });\n\n  // Export endpoints\n  app.get(\"/api/export/lender-package\", async (req, res) => {\n    try {\n      const { portfolioKey = 'hartford1' } = req.query;\n      \n      // Get portfolio data\n      const portfolio = await storage.getPortfolioByKey(portfolioKey as string);\n      if (!portfolio) {\n        return res.status(404).json({ message: \"Portfolio not found\" });\n      }\n\n      const properties = await storage.getPropertiesByPortfolio(portfolio.id);\n      const exportData = {\n        portfolio,\n        properties,\n        exportDate: new Date().toISOString(),\n        exportType: 'lender-package'\n      };\n\n      res.json(exportData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate lender package\", error: error });\n    }\n  });\n\n  app.get(\"/api/export/excel-data\", async (req, res) => {\n    try {\n      const { portfolioKey = 'hartford1' } = req.query;\n      \n      // Get portfolio data\n      const portfolio = await storage.getPortfolioByKey(portfolioKey as string);\n      if (!portfolio) {\n        return res.status(404).json({ message: \"Portfolio not found\" });\n      }\n\n      const properties = await storage.getPropertiesByPortfolio(portfolio.id);\n      const allGLAccounts = [];\n      const allNotes = [];\n      const allActionItems = [];\n\n      for (const property of properties) {\n        const glAccounts = await storage.getGLAccountsByProperty(property.id);\n        const notes = await storage.getNotesByProperty(property.id);\n        const actionItems = await storage.getActionItemsByProperty(property.id);\n        \n        allGLAccounts.push(...glAccounts.map(acc => ({ ...acc, propertyCode: property.code })));\n        allNotes.push(...notes.map(note => ({ ...note, propertyCode: property.code })));\n        allActionItems.push(...actionItems.map(item => ({ ...item, propertyCode: property.code })));\n      }\n\n      const exportData = {\n        portfolio,\n        properties,\n        glAccounts: allGLAccounts,\n        notes: allNotes,\n        actionItems: allActionItems,\n        exportDate: new Date().toISOString(),\n        exportType: 'excel-data'\n      };\n\n      res.json(exportData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate Excel export data\", error: error });\n    }\n  });\n\n  // Manual GL Account Override (for correcting Excel data)\n  app.post(\"/api/properties/:propertyId/gl-override\", async (req, res) => {\n    try {\n      const { propertyId } = req.params;\n      const { glAccounts } = req.body;\n      \n      // Clear existing GL accounts\n      await storage.deleteGLAccountsByProperty(propertyId);\n      \n      // Add new GL accounts with correct data\n      const currentMonth = \"2024-01\";\n      const createdAccounts = [];\n      \n      for (const account of glAccounts) {\n        const created = await storage.createGLAccount({\n          propertyId,\n          code: account.code,\n          description: account.description,\n          amount: account.amount,\n          type: account.type,\n          month: currentMonth\n        });\n        createdAccounts.push(created);\n      }\n      \n      res.json({ \n        message: \"GL accounts updated successfully\", \n        accounts: createdAccounts \n      });\n    } catch (error) {\n      console.error(\"GL override error:\", error);\n      res.status(500).json({ message: \"Failed to update GL accounts\" });\n    }\n  });\n\n  // Cell Comments Routes\n  app.get(\"/api/cell-comments\", async (req, res) => {\n    try {\n      const { propertyId, commentType } = req.query;\n      \n      let comments;\n      if (propertyId) {\n        comments = await storage.getCellCommentsByProperty(propertyId as string);\n      } else if (commentType) {\n        comments = await storage.getCellCommentsByType(commentType as string);\n      } else {\n        comments = await storage.getAllCellComments();\n      }\n      \n      res.json(comments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cell comments\" });\n    }\n  });\n\n  app.post(\"/api/cell-comments\", async (req, res) => {\n    try {\n      const { propertyCode, cellReference, cellValue, tabSection, noteText, commentType, priority, actionRequired } = req.body;\n      \n      // Find property by code\n      const property = await storage.getPropertyByCode(propertyCode);\n      if (!property) {\n        return res.status(404).json({ message: \"Property not found\" });\n      }\n\n      // Generate comment number\n      const commentNumber = await storage.getNextCommentNumber(propertyCode);\n      \n      const comment = await storage.createCellComment({\n        commentNumber,\n        commentType: commentType || 'ACCOUNTING',\n        cellReference,\n        cellValue,\n        propertyId: property.id,\n        tabSection,\n        noteText,\n        actionRequired: actionRequired || false,\n        priority: priority || 'MEDIUM',\n        status: 'OPEN',\n        author: 'User'\n      });\n      \n      res.status(201).json(comment);\n    } catch (error) {\n      console.error(\"Cell comment creation error:\", error);\n      res.status(500).json({ message: \"Failed to create cell comment\" });\n    }\n  });\n\n  app.patch(\"/api/cell-comments/:id\", async (req, res) => {\n    try {\n      const updated = await storage.updateCellComment(req.params.id, req.body);\n      if (!updated) {\n        return res.status(404).json({ message: \"Cell comment not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update cell comment\" });\n    }\n  });\n\n  app.delete(\"/api/cell-comments/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteCellComment(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Cell comment not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete cell comment\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12304},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type Portfolio, type InsertPortfolio,\n  type Property, type InsertProperty, type GLAccount, type InsertGLAccount,\n  type Note, type InsertNote, type ActionItem, type InsertActionItem,\n  type ExcelFile, type InsertExcelFile, type CellComment, type InsertCellComment\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Portfolios\n  getAllPortfolios(): Promise<Portfolio[]>;\n  getPortfolio(id: string): Promise<Portfolio | undefined>;\n  getPortfolioByKey(key: string): Promise<Portfolio | undefined>;\n  createPortfolio(portfolio: InsertPortfolio): Promise<Portfolio>;\n  updatePortfolio(id: string, portfolio: Partial<InsertPortfolio>): Promise<Portfolio | undefined>;\n\n  // Properties\n  getAllProperties(): Promise<Property[]>;\n  getPropertiesByPortfolio(portfolioId: string): Promise<Property[]>;\n  getProperty(id: string): Promise<Property | undefined>;\n  getPropertyByCode(code: string): Promise<Property | undefined>;\n  createProperty(property: InsertProperty): Promise<Property>;\n  updateProperty(id: string, property: Partial<InsertProperty>): Promise<Property | undefined>;\n\n  // GL Accounts\n  getGLAccountsByProperty(propertyId: string, month?: string): Promise<GLAccount[]>;\n  getGLAccount(id: string): Promise<GLAccount | undefined>;\n  createGLAccount(account: InsertGLAccount): Promise<GLAccount>;\n  updateGLAccount(id: string, account: Partial<InsertGLAccount>): Promise<GLAccount | undefined>;\n  deleteGLAccountsByProperty(propertyId: string): Promise<void>;\n\n  // Notes\n  getNotesByProperty(propertyId: string): Promise<Note[]>;\n  getNote(id: string): Promise<Note | undefined>;\n  createNote(note: InsertNote): Promise<Note>;\n  updateNote(id: string, note: Partial<InsertNote>): Promise<Note | undefined>;\n  deleteNote(id: string): Promise<boolean>;\n\n  // Action Items\n  getActionItemsByProperty(propertyId: string): Promise<ActionItem[]>;\n  getAllActionItems(): Promise<ActionItem[]>;\n  getActionItem(id: string): Promise<ActionItem | undefined>;\n  createActionItem(item: InsertActionItem): Promise<ActionItem>;\n  updateActionItem(id: string, item: Partial<InsertActionItem>): Promise<ActionItem | undefined>;\n  deleteActionItem(id: string): Promise<boolean>;\n\n  // Excel Files\n  getAllExcelFiles(): Promise<ExcelFile[]>;\n  getExcelFile(id: string): Promise<ExcelFile | undefined>;\n  createExcelFile(file: InsertExcelFile): Promise<ExcelFile>;\n\n  // Cell Comments\n  getCellCommentsByProperty(propertyId: string): Promise<CellComment[]>;\n  getCellCommentsByType(commentType: string): Promise<CellComment[]>;\n  getAllCellComments(): Promise<CellComment[]>;\n  getCellComment(id: string): Promise<CellComment | undefined>;\n  createCellComment(comment: InsertCellComment): Promise<CellComment>;\n  updateCellComment(id: string, comment: Partial<InsertCellComment>): Promise<CellComment | undefined>;\n  deleteCellComment(id: string): Promise<boolean>;\n  getNextCommentNumber(propertyCode: string): Promise<string>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private portfolios: Map<string, Portfolio>;\n  private properties: Map<string, Property>;\n  private glAccounts: Map<string, GLAccount>;\n  private notes: Map<string, Note>;\n  private actionItems: Map<string, ActionItem>;\n  private excelFiles: Map<string, ExcelFile>;\n  private cellComments: Map<string, CellComment>;\n\n  constructor() {\n    this.users = new Map();\n    this.portfolios = new Map();\n    this.properties = new Map();\n    this.glAccounts = new Map();\n    this.notes = new Map();\n    this.actionItems = new Map();\n    this.excelFiles = new Map();\n    this.cellComments = new Map();\n\n    // Initialize with Hartford 1 data\n    this.initializeData();\n  }\n\n  private async initializeData() {\n    // Create Hartford 1 portfolio\n    const hartfordPortfolio = await this.createPortfolio({\n      name: \"Hartford 1\",\n      key: \"hartford1\",\n      totalUnits: 6,\n      totalNOI: 85000,\n      capRate: 12.2\n    });\n\n    // Create other portfolios\n    const consolidatedPortfolio = await this.createPortfolio({\n      name: \"Consolidated\",\n      key: \"all\",\n      totalUnits: 109,\n      totalNOI: 985000,\n      capRate: 9.6\n    });\n\n    const southEndPortfolio = await this.createPortfolio({\n      name: \"South End\",\n      key: \"southend\",\n      totalUnits: 51,\n      totalNOI: 450000,\n      capRate: 12.1\n    });\n\n    const northEndPortfolio = await this.createPortfolio({\n      name: \"North End\",\n      key: \"northend\",\n      totalUnits: 40,\n      totalNOI: 385000,\n      capRate: 11.8\n    });\n\n    const parkPortfolio = await this.createPortfolio({\n      name: \"90 Park\",\n      key: \"90park\",\n      totalUnits: 12,\n      totalNOI: 125000,\n      capRate: 8.9\n    });\n\n    // Create Hartford 1 property\n    const hartfordProperty = await this.createProperty({\n      code: \"S0010\",\n      name: \"228 Maple\",\n      portfolioId: hartfordPortfolio.id,\n      units: 6,\n      monthlyNOI: 6800,\n      noiMargin: 64.8,\n      occupancy: 94.5,\n      revenuePerUnit: 1750,\n      capRate: 12.2,\n      dscr: 2.15\n    });\n\n    // Create South End properties\n    const southProperty1 = await this.createProperty({\n      code: \"S0020\",\n      name: \"150 Union Street\",\n      portfolioId: southEndPortfolio.id,\n      units: 24,\n      monthlyNOI: 18500,\n      noiMargin: 68.2,\n      occupancy: 96.8,\n      revenuePerUnit: 1850,\n      capRate: 11.8,\n      dscr: 1.95\n    });\n\n    const southProperty2 = await this.createProperty({\n      code: \"S0021\",\n      name: \"425 Broadway\",\n      portfolioId: southEndPortfolio.id,\n      units: 27,\n      monthlyNOI: 19200,\n      noiMargin: 71.5,\n      occupancy: 98.2,\n      revenuePerUnit: 1920,\n      capRate: 12.4,\n      dscr: 2.08\n    });\n\n    // Create North End properties\n    const northProperty1 = await this.createProperty({\n      code: \"N0030\",\n      name: \"88 Salem Street\",\n      portfolioId: northEndPortfolio.id,\n      units: 18,\n      monthlyNOI: 14800,\n      noiMargin: 65.4,\n      occupancy: 94.1,\n      revenuePerUnit: 1680,\n      capRate: 11.2,\n      dscr: 1.88\n    });\n\n    const northProperty2 = await this.createProperty({\n      code: \"N0031\",\n      name: \"205 Hanover Street\",\n      portfolioId: northEndPortfolio.id,\n      units: 22,\n      monthlyNOI: 17600,\n      noiMargin: 69.8,\n      occupancy: 97.5,\n      revenuePerUnit: 1780,\n      capRate: 12.0,\n      dscr: 2.12\n    });\n\n    // Create 90 Park property\n    const parkProperty = await this.createProperty({\n      code: \"P0040\",\n      name: \"90 Park Street\",\n      portfolioId: parkPortfolio.id,\n      units: 12,\n      monthlyNOI: 9800,\n      noiMargin: 58.2,\n      occupancy: 91.7,\n      revenuePerUnit: 1580,\n      capRate: 8.9,\n      dscr: 1.65\n    });\n\n    // Create GL accounts for all properties\n    const currentMonth = \"2024-01\";\n    \n    // Hartford 1 GL Accounts\n    await this.createGLAccount({\n      propertyId: hartfordProperty.id,\n      code: \"4105\",\n      description: \"Rent Income\",\n      amount: 10200,\n      type: \"revenue\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"4110\",\n      description: \"Section 8 Rent\",\n      amount: 300,\n      type: \"revenue\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"6105\",\n      description: \"Property Management\",\n      amount: 630,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"6110\",\n      description: \"Maintenance & Repairs\",\n      amount: 1850,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"6120\",\n      description: \"Utilities\",\n      amount: 420,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"6130\",\n      description: \"Property Insurance\",\n      amount: 285,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"6140\",\n      description: \"Property Taxes\",\n      amount: 815,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    // Additional income and expense accounts\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"4120\",\n      description: \"Other Income\",\n      amount: 180,\n      type: \"revenue\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"6115\",\n      description: \"Landscaping & Grounds\",\n      amount: 285,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"6125\",\n      description: \"Trash & Recycling\",\n      amount: 125,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"6150\",\n      description: \"Legal & Professional\",\n      amount: 150,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"6160\",\n      description: \"Office & Administrative\",\n      amount: 75,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    // Balance Sheet Assets\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"1100\",\n      description: \"Cash & Equivalents\",\n      amount: 156000,\n      type: \"asset\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"1200\",\n      description: \"Accounts Receivable\",\n      amount: 12500,\n      type: \"asset\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"1500\",\n      description: \"Property Value (Appraised)\",\n      amount: 2840000,\n      type: \"asset\",\n      month: currentMonth\n    });\n\n    // Balance Sheet Liabilities\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"2200\",\n      description: \"Owner Held Security Deposits\",\n      amount: 10400,\n      type: \"liability\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"2400\",\n      description: \"Due to Stanton Group LLC\",\n      amount: 8350,\n      type: \"liability\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"2500\",\n      description: \"Mortgage Payable\",\n      amount: 1850000,\n      type: \"liability\",\n      month: currentMonth\n    });\n\n    // Balance Sheet Equity\n    await this.createGLAccount({\n      propertyId: property.id,\n      code: \"3100\",\n      description: \"Owner Contributions\",\n      amount: 450000,\n      type: \"equity\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: hartfordProperty.id,\n      code: \"3200\",\n      description: \"Retained Earnings\",\n      amount: 145038,\n      type: \"equity\",\n      month: currentMonth\n    });\n\n    // South End Property 1 (S0020) - 150 Union Street GL Accounts\n    await this.createGLAccount({\n      propertyId: southProperty1.id,\n      code: \"4105\",\n      description: \"Rent Income\",\n      amount: 35400,\n      type: \"revenue\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: southProperty1.id,\n      code: \"6105\",\n      description: \"Property Management\",\n      amount: 1770,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: southProperty1.id,\n      code: \"6110\",\n      description: \"Maintenance & Repairs\",\n      amount: 4250,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: southProperty1.id,\n      code: \"6140\",\n      description: \"Property Taxes\",\n      amount: 2980,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    // South End Property 2 (S0021) - 425 Broadway GL Accounts\n    await this.createGLAccount({\n      propertyId: southProperty2.id,\n      code: \"4105\",\n      description: \"Rent Income\",\n      amount: 41850,\n      type: \"revenue\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: southProperty2.id,\n      code: \"6105\",\n      description: \"Property Management\",\n      amount: 2090,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: southProperty2.id,\n      code: \"6110\",\n      description: \"Maintenance & Repairs\",\n      amount: 3200,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    // North End Property 1 (N0030) - 88 Salem Street GL Accounts\n    await this.createGLAccount({\n      propertyId: northProperty1.id,\n      code: \"4105\",\n      description: \"Rent Income\",\n      amount: 28800,\n      type: \"revenue\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: northProperty1.id,\n      code: \"6105\",\n      description: \"Property Management\",\n      amount: 1440,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: northProperty1.id,\n      code: \"6110\",\n      description: \"Maintenance & Repairs\",\n      amount: 2850,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    // North End Property 2 (N0031) - 205 Hanover Street GL Accounts  \n    await this.createGLAccount({\n      propertyId: northProperty2.id,\n      code: \"4105\",\n      description: \"Rent Income\",\n      amount: 35200,\n      type: \"revenue\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: northProperty2.id,\n      code: \"6105\",\n      description: \"Property Management\",\n      amount: 1760,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    // 90 Park Property (P0040) GL Accounts\n    await this.createGLAccount({\n      propertyId: parkProperty.id,\n      code: \"4105\",\n      description: \"Rent Income\",\n      amount: 18960,\n      type: \"revenue\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: parkProperty.id,\n      code: \"6105\",\n      description: \"Property Management\",\n      amount: 948,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    await this.createGLAccount({\n      propertyId: parkProperty.id,\n      code: \"6110\",\n      description: \"Maintenance & Repairs\",\n      amount: 1580,\n      type: \"expense\",\n      month: currentMonth\n    });\n\n    // Add sample action items for multiple properties\n    await this.createActionItem({\n      itemId: \"AI-001\",\n      propertyId: hartfordProperty.id,\n      description: \"Investigate 146% increase in maintenance costs\",\n      priority: \"HIGH\",\n      status: \"OPEN\"\n    });\n\n    await this.createActionItem({\n      itemId: \"AI-002\",\n      propertyId: southProperty1.id,\n      description: \"Review high property management fees vs budget\",\n      priority: \"MEDIUM\",\n      status: \"OPEN\"\n    });\n\n    await this.createActionItem({\n      itemId: \"AI-003\",\n      propertyId: northProperty2.id,\n      description: \"Update rent roll for unit 205B vacancy\",\n      priority: \"LOW\",\n      status: \"IN_PROGRESS\"\n    });\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Portfolios\n  async getAllPortfolios(): Promise<Portfolio[]> {\n    return Array.from(this.portfolios.values());\n  }\n\n  async getPortfolio(id: string): Promise<Portfolio | undefined> {\n    return this.portfolios.get(id);\n  }\n\n  async getPortfolioByKey(key: string): Promise<Portfolio | undefined> {\n    return Array.from(this.portfolios.values()).find(p => p.key === key);\n  }\n\n  async createPortfolio(insertPortfolio: InsertPortfolio): Promise<Portfolio> {\n    const id = randomUUID();\n    const portfolio: Portfolio = { ...insertPortfolio, id };\n    this.portfolios.set(id, portfolio);\n    return portfolio;\n  }\n\n  async updatePortfolio(id: string, updates: Partial<InsertPortfolio>): Promise<Portfolio | undefined> {\n    const portfolio = this.portfolios.get(id);\n    if (!portfolio) return undefined;\n    const updated = { ...portfolio, ...updates };\n    this.portfolios.set(id, updated);\n    return updated;\n  }\n\n  // Properties\n  async getAllProperties(): Promise<Property[]> {\n    return Array.from(this.properties.values());\n  }\n\n  async getPropertiesByPortfolio(portfolioId: string): Promise<Property[]> {\n    return Array.from(this.properties.values()).filter(p => p.portfolioId === portfolioId);\n  }\n\n  async getProperty(id: string): Promise<Property | undefined> {\n    return this.properties.get(id);\n  }\n\n  async getPropertyByCode(code: string): Promise<Property | undefined> {\n    return Array.from(this.properties.values()).find(p => p.code === code);\n  }\n\n  async createProperty(insertProperty: InsertProperty): Promise<Property> {\n    const id = randomUUID();\n    const property: Property = { ...insertProperty, id };\n    this.properties.set(id, property);\n    return property;\n  }\n\n  async updateProperty(id: string, updates: Partial<InsertProperty>): Promise<Property | undefined> {\n    const property = this.properties.get(id);\n    if (!property) return undefined;\n    const updated = { ...property, ...updates };\n    this.properties.set(id, updated);\n    return updated;\n  }\n\n  // GL Accounts\n  async getGLAccountsByProperty(propertyId: string, month?: string): Promise<GLAccount[]> {\n    return Array.from(this.glAccounts.values()).filter(acc => \n      acc.propertyId === propertyId && (!month || acc.month === month)\n    );\n  }\n\n  async getGLAccount(id: string): Promise<GLAccount | undefined> {\n    return this.glAccounts.get(id);\n  }\n\n  async createGLAccount(insertAccount: InsertGLAccount): Promise<GLAccount> {\n    const id = randomUUID();\n    const account: GLAccount = { ...insertAccount, id };\n    this.glAccounts.set(id, account);\n    return account;\n  }\n\n  async updateGLAccount(id: string, updates: Partial<InsertGLAccount>): Promise<GLAccount | undefined> {\n    const account = this.glAccounts.get(id);\n    if (!account) return undefined;\n    const updated = { ...account, ...updates };\n    this.glAccounts.set(id, updated);\n    return updated;\n  }\n\n  async deleteGLAccountsByProperty(propertyId: string): Promise<void> {\n    for (const [id, account] of this.glAccounts.entries()) {\n      if (account.propertyId === propertyId) {\n        this.glAccounts.delete(id);\n      }\n    }\n  }\n\n  // Notes\n  async getNotesByProperty(propertyId: string): Promise<Note[]> {\n    return Array.from(this.notes.values()).filter(n => n.propertyId === propertyId);\n  }\n\n  async getNote(id: string): Promise<Note | undefined> {\n    return this.notes.get(id);\n  }\n\n  async createNote(insertNote: InsertNote): Promise<Note> {\n    const id = randomUUID();\n    const note: Note = { ...insertNote, id, createdAt: new Date() };\n    this.notes.set(id, note);\n    return note;\n  }\n\n  async updateNote(id: string, updates: Partial<InsertNote>): Promise<Note | undefined> {\n    const note = this.notes.get(id);\n    if (!note) return undefined;\n    const updated = { ...note, ...updates };\n    this.notes.set(id, updated);\n    return updated;\n  }\n\n  async deleteNote(id: string): Promise<boolean> {\n    return this.notes.delete(id);\n  }\n\n  // Action Items\n  async getActionItemsByProperty(propertyId: string): Promise<ActionItem[]> {\n    return Array.from(this.actionItems.values()).filter(item => item.propertyId === propertyId);\n  }\n\n  async getAllActionItems(): Promise<ActionItem[]> {\n    return Array.from(this.actionItems.values());\n  }\n\n  async getActionItem(id: string): Promise<ActionItem | undefined> {\n    return this.actionItems.get(id);\n  }\n\n  async createActionItem(insertItem: InsertActionItem): Promise<ActionItem> {\n    const id = randomUUID();\n    const item: ActionItem = { ...insertItem, id, createdAt: new Date() };\n    this.actionItems.set(id, item);\n    return item;\n  }\n\n  async updateActionItem(id: string, updates: Partial<InsertActionItem>): Promise<ActionItem | undefined> {\n    const item = this.actionItems.get(id);\n    if (!item) return undefined;\n    const updated = { ...item, ...updates };\n    this.actionItems.set(id, updated);\n    return updated;\n  }\n\n  async deleteActionItem(id: string): Promise<boolean> {\n    return this.actionItems.delete(id);\n  }\n\n  // Excel Files\n  async getAllExcelFiles(): Promise<ExcelFile[]> {\n    return Array.from(this.excelFiles.values());\n  }\n\n  async getExcelFile(id: string): Promise<ExcelFile | undefined> {\n    return this.excelFiles.get(id);\n  }\n\n  async createExcelFile(insertFile: InsertExcelFile): Promise<ExcelFile> {\n    const id = randomUUID();\n    const file: ExcelFile = { ...insertFile, id, uploadedAt: new Date() };\n    this.excelFiles.set(id, file);\n    return file;\n  }\n\n  // Cell Comments\n  async getCellCommentsByProperty(propertyId: string): Promise<CellComment[]> {\n    return Array.from(this.cellComments.values()).filter(comment => comment.propertyId === propertyId);\n  }\n\n  async getCellCommentsByType(commentType: string): Promise<CellComment[]> {\n    return Array.from(this.cellComments.values()).filter(comment => comment.commentType === commentType);\n  }\n\n  async getAllCellComments(): Promise<CellComment[]> {\n    return Array.from(this.cellComments.values());\n  }\n\n  async getCellComment(id: string): Promise<CellComment | undefined> {\n    return this.cellComments.get(id);\n  }\n\n  async createCellComment(insertComment: InsertCellComment): Promise<CellComment> {\n    const id = randomUUID();\n    const comment: CellComment = { \n      ...insertComment, \n      id, \n      createdAt: new Date(),\n      completedAt: insertComment.status === 'COMPLETED' ? new Date() : null\n    };\n    this.cellComments.set(id, comment);\n    return comment;\n  }\n\n  async updateCellComment(id: string, updates: Partial<InsertCellComment>): Promise<CellComment | undefined> {\n    const comment = this.cellComments.get(id);\n    if (!comment) return undefined;\n    \n    const updated: CellComment = { \n      ...comment, \n      ...updates,\n      completedAt: updates.status === 'COMPLETED' && comment.status !== 'COMPLETED' ? new Date() : comment.completedAt\n    };\n    this.cellComments.set(id, updated);\n    return updated;\n  }\n\n  async deleteCellComment(id: string): Promise<boolean> {\n    return this.cellComments.delete(id);\n  }\n\n  async getNextCommentNumber(propertyCode: string): Promise<string> {\n    const propertyComments = Array.from(this.cellComments.values())\n      .filter(comment => comment.commentNumber.startsWith(propertyCode))\n      .map(comment => comment.commentNumber)\n      .sort();\n    \n    const lastNumber = propertyComments.length > 0 \n      ? parseInt(propertyComments[propertyComments.length - 1].split('-')[1]) || 0\n      : 0;\n    \n    return `${propertyCode}-${String(lastNumber + 1).padStart(3, '0')}`;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":23422},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, real, integer, jsonb, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const portfolios = pgTable(\"portfolios\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  key: text(\"key\").notNull().unique(),\n  totalUnits: integer(\"total_units\").notNull().default(0),\n  totalNOI: real(\"total_noi\").notNull().default(0),\n  capRate: real(\"cap_rate\").notNull().default(0),\n});\n\nexport const properties = pgTable(\"properties\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(), // e.g., \"S0010\"\n  name: text(\"name\").notNull(), // e.g., \"228 Maple\"\n  portfolioId: varchar(\"portfolio_id\").references(() => portfolios.id).notNull(),\n  units: integer(\"units\").notNull().default(0),\n  monthlyNOI: real(\"monthly_noi\").notNull().default(0),\n  noiMargin: real(\"noi_margin\").notNull().default(0),\n  occupancy: real(\"occupancy\").notNull().default(0),\n  revenuePerUnit: real(\"revenue_per_unit\").notNull().default(0),\n  capRate: real(\"cap_rate\").notNull().default(0),\n  dscr: real(\"dscr\").notNull().default(0),\n});\n\nexport const glAccounts = pgTable(\"gl_accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  propertyId: varchar(\"property_id\").references(() => properties.id).notNull(),\n  code: text(\"code\").notNull(), // e.g., \"4105\"\n  description: text(\"description\").notNull(),\n  amount: real(\"amount\").notNull().default(0),\n  type: text(\"type\").notNull(), // \"revenue\" or \"expense\"\n  month: text(\"month\").notNull(), // e.g., \"2024-01\"\n});\n\nexport const cellComments = pgTable(\"cell_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  commentNumber: text(\"comment_number\").notNull(), // e.g., \"S0010-001\"\n  commentType: text(\"comment_type\").notNull(), // \"ACCOUNTING\" | \"PROPERTY_MANAGEMENT\" | \"EXTERNAL\"\n  cellReference: text(\"cell_reference\").notNull(), // e.g., \"Balance Sheet > DSCR > Current Ratio\"\n  cellValue: text(\"cell_value\").notNull(), // The actual data value when commented\n  propertyId: varchar(\"property_id\").references(() => properties.id).notNull(),\n  tabSection: text(\"tab_section\").notNull(), // \"Balance Sheet\", \"T12 Performance\", etc.\n  noteText: text(\"note_text\").notNull(),\n  actionRequired: boolean(\"action_required\").notNull().default(false),\n  priority: text(\"priority\").notNull().default(\"MEDIUM\"), // HIGH, MEDIUM, LOW\n  status: text(\"status\").notNull().default(\"OPEN\"), // OPEN, IN_PROGRESS, COMPLETED\n  completionNote: text(\"completion_note\"), // For accounting completion comments\n  author: text(\"author\").notNull().default(\"User\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const notes = pgTable(\"notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cellId: text(\"cell_id\").notNull(), // e.g., \"gl-4105\"\n  propertyId: varchar(\"property_id\").references(() => properties.id).notNull(),\n  text: text(\"text\").notNull(),\n  author: text(\"author\").notNull().default(\"User\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const actionItems = pgTable(\"action_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  itemId: text(\"item_id\").notNull(), // e.g., \"AI-001\"\n  propertyId: varchar(\"property_id\").references(() => properties.id).notNull(),\n  description: text(\"description\").notNull(),\n  priority: text(\"priority\").notNull().default(\"MEDIUM\"), // HIGH, MEDIUM, LOW\n  status: text(\"status\").notNull().default(\"OPEN\"), // OPEN, IN_PROGRESS, CLOSED\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const excelFiles = pgTable(\"excel_files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").notNull().default(sql`now()`),\n  processedData: jsonb(\"processed_data\"), // Store processed Excel data\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertPortfolioSchema = createInsertSchema(portfolios).omit({\n  id: true,\n});\n\nexport const insertPropertySchema = createInsertSchema(properties).omit({\n  id: true,\n});\n\nexport const insertGLAccountSchema = createInsertSchema(glAccounts).omit({\n  id: true,\n});\n\nexport const insertNoteSchema = createInsertSchema(notes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActionItemSchema = createInsertSchema(actionItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertExcelFileSchema = createInsertSchema(excelFiles).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertCellCommentSchema = createInsertSchema(cellComments).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Portfolio = typeof portfolios.$inferSelect;\nexport type InsertPortfolio = z.infer<typeof insertPortfolioSchema>;\n\nexport type Property = typeof properties.$inferSelect;\nexport type InsertProperty = z.infer<typeof insertPropertySchema>;\n\nexport type GLAccount = typeof glAccounts.$inferSelect;\nexport type InsertGLAccount = z.infer<typeof insertGLAccountSchema>;\n\nexport type Note = typeof notes.$inferSelect;\nexport type InsertNote = z.infer<typeof insertNoteSchema>;\n\nexport type ActionItem = typeof actionItems.$inferSelect;\nexport type InsertActionItem = z.infer<typeof insertActionItemSchema>;\n\nexport type ExcelFile = typeof excelFiles.$inferSelect;\nexport type InsertExcelFile = z.infer<typeof insertExcelFileSchema>;\n\nexport type CellComment = typeof cellComments.$inferSelect;\nexport type InsertCellComment = z.infer<typeof insertCellCommentSchema>;\n","size_bytes":6154},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AccountingNotesDashboard from \"@/pages/accounting-notes\";\nimport PropertyManagementNotesDashboard from \"@/pages/property-management-notes\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/accounting-notes\" component={AccountingNotesDashboard} />\n      <Route path=\"/property-management-notes\" component={PropertyManagementNotesDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1034},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(0, 0%, 0%);\n  --card: hsl(210, 8%, 97%);\n  --card-foreground: hsl(0, 0%, 0%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 0%);\n  --primary: hsl(0, 0%, 0%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(0, 0%, 100%);\n  --secondary-foreground: hsl(0, 0%, 0%);\n  --muted: hsl(210, 8%, 97%);\n  --muted-foreground: hsl(0, 0%, 45%);\n  --accent: hsl(210, 8%, 97%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 80%);\n  --input: hsl(0, 0%, 97%);\n  --ring: hsl(0, 0%, 0%);\n  --chart-1: hsl(0, 0%, 0%);\n  --chart-2: hsl(120, 100%, 25%);\n  --chart-3: hsl(45, 93%, 47%);\n  --chart-4: hsl(120, 60%, 50%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(210, 8%, 97%);\n  --sidebar-foreground: hsl(0, 0%, 0%);\n  --sidebar-primary: hsl(0, 0%, 0%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 8%, 92%);\n  --sidebar-accent-foreground: hsl(0, 0%, 0%);\n  --sidebar-border: hsl(0, 0%, 85%);\n  --sidebar-ring: hsl(0, 0%, 0%);\n  \n  /* Institutional colors */\n  --institutional-black: hsl(0, 0%, 0%);\n  --institutional-white: hsl(0, 0%, 100%);\n  --institutional-accent: hsl(210, 8%, 97%);\n  --institutional-border: hsl(0, 0%, 80%);\n  --highlight-yellow: hsl(60, 100%, 59%);\n  --success-green: hsl(120, 100%, 20%);\n  --note-purple: hsl(271, 81%, 56%);\n  --alert-red: hsl(0, 73%, 41%);\n  \n  /* Font families */\n  --font-sans: 'Segoe UI', Arial, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Courier New', Monaco, monospace;\n  --font-mono-data: 'Courier New', Monaco, monospace;\n  \n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(0, 0%, 100%);\n  --card: hsl(0, 0%, 10%);\n  --card-foreground: hsl(0, 0%, 100%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: hsl(0, 0%, 100%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(0, 0%, 10%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 10%);\n  --muted-foreground: hsl(0, 0%, 65%);\n  --accent: hsl(0, 0%, 10%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 10%);\n  --ring: hsl(0, 0%, 100%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground antialiased;\n    font-family: var(--font-sans);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-sans);\n  }\n}\n\n@layer components {\n  /* Institutional table styling */\n  .institutional-table {\n    border-collapse: separate;\n    border-spacing: 0;\n    border: 2px solid var(--institutional-black);\n    width: 100%;\n  }\n  \n  .institutional-table th {\n    background: var(--institutional-black);\n    color: var(--institutional-white);\n    padding: 16px 12px;\n    font-size: 12px;\n    font-weight: 700;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    border-right: 1px solid var(--institutional-white);\n    font-family: var(--font-sans);\n  }\n  \n  .institutional-table th:last-child {\n    border-right: none;\n  }\n  \n  .institutional-table td {\n    background: var(--institutional-white);\n    padding: 2px 6px;\n    border-bottom: 1px solid var(--institutional-border);\n    border-right: 1px solid var(--institutional-border);\n    font-size: 14px;\n    line-height: 1.2;\n    transition: all 0.15s ease;\n    font-family: var(--font-sans);\n  }\n  \n  /* Alternating row colors */\n  .institutional-table tbody tr:nth-child(even) td {\n    background: hsl(210, 8%, 98%);\n  }\n  \n  .institutional-table tbody tr:nth-child(odd) td {\n    background: var(--institutional-white);\n  }\n  \n  .institutional-table tbody tr:hover td {\n    background: hsl(210, 8%, 95%) !important;\n  }\n  \n  .institutional-table td:last-child {\n    border-right: none;\n  }\n  \n  /* Column-specific alignments */\n  .institutional-table .text-right {\n    text-align: right !important;\n  }\n\n  .institutional-table .text-center {\n    text-align: center !important;\n  }\n\n  .institutional-table .text-left {\n    text-align: left !important;\n  }\n\n  /* Number formatting for financial data */\n  .font-mono-data {\n    font-family: 'JetBrains Mono', 'Courier New', monospace;\n    font-variant-numeric: tabular-nums;\n  }\n  \n  .institutional-table tr:last-child td {\n    border-bottom: none;\n  }\n  \n  /* Click highlighting effect */\n  .click-highlight {\n    background: var(--highlight-yellow) !important;\n    transform: scale(1.02);\n    transition: all 0.1s ease;\n    position: relative;\n    z-index: 10;\n  }\n  \n  /* Note indicator */\n  .note-indicator {\n    background: var(--note-purple);\n    color: var(--institutional-white);\n    font-size: 10px;\n    font-weight: 700;\n    padding: 2px 6px;\n    border-radius: 3px;\n    margin-left: 8px;\n    text-transform: uppercase;\n    display: inline-block;\n  }\n  \n  /* Alert indicator */\n  .alert-indicator {\n    background: var(--alert-red);\n    color: var(--institutional-white);\n    font-size: 10px;\n    font-weight: 700;\n    padding: 2px 6px;\n    border-radius: 3px;\n    margin-left: 8px;\n    animation: pulse 2s infinite;\n    display: inline-block;\n  }\n  \n  @keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.7; }\n  }\n  \n  /* Institutional buttons */\n  .btn-institutional {\n    background: var(--institutional-black);\n    color: var(--institutional-white);\n    border: none;\n    padding: 8px 16px;\n    font-size: 10px;\n    text-transform: uppercase;\n    font-weight: 700;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    font-family: var(--font-sans);\n  }\n  \n  .btn-institutional:hover {\n    background: hsl(0, 0%, 20%);\n  }\n  \n  .btn-secondary {\n    background: var(--institutional-white);\n    color: var(--institutional-black);\n    border: 2px solid var(--institutional-black);\n    padding: 8px 16px;\n    font-size: 10px;\n    text-transform: uppercase;\n    font-weight: 700;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    font-family: var(--font-sans);\n  }\n  \n  .btn-secondary:hover {\n    background: var(--institutional-accent);\n  }\n  \n  /* Monospace data styling */\n  .font-mono-data {\n    font-family: var(--font-mono-data);\n    font-variant-numeric: tabular-nums;\n  }\n  \n  /* Success/error colors */\n  .text-success-green {\n    color: var(--success-green);\n  }\n  \n  .bg-success-green {\n    background-color: var(--success-green);\n  }\n  \n  /* Portfolio item styling */\n  .portfolio-item {\n    transition: all 0.2s ease;\n  }\n  \n  .portfolio-item.active {\n    background: hsl(214, 100%, 97%);\n    border-left: 4px solid hsl(214, 100%, 60%);\n  }\n  \n  /* KPI card styling */\n  .kpi-card {\n    transition: all 0.2s ease;\n    cursor: pointer;\n  }\n  \n  .kpi-card:hover {\n    background: var(--institutional-accent);\n  }\n  \n  /* Tab styling */\n  .tab-button {\n    transition: all 0.2s ease;\n  }\n  \n  .tab-button.active {\n    background: var(--institutional-black);\n    color: var(--institutional-white);\n  }\n}\n\n@layer utilities {\n  .font-segoe {\n    font-family: var(--font-sans);\n  }\n}\n","size_bytes":7321},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/property-dashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Upload, Download, FileText, RefreshCw, Flag, AlertTriangle, MessageSquare, Wrench, Settings, Eye, EyeOff } from 'lucide-react';\nimport { Link } from 'wouter';\nimport type { Portfolio, Property, GLAccount, Note, ActionItem } from '@shared/schema';\nimport { ExportUtils } from '@/lib/export-utils';\nimport { ExcelProcessor } from '@/lib/excel-processor';\nimport { downloadExcelTemplate } from '@/lib/excel-template-generator';\nimport ClickableCell from './clickable-cell';\n\ninterface PropertyDashboardProps {}\n\nexport function PropertyDashboard({}: PropertyDashboardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedPortfolio, setSelectedPortfolio] = useState('hartford1');\n  const [selectedPropertyId, setSelectedPropertyId] = useState<string>('');\n  const [activeTab, setActiveTab] = useState('performance');\n  const [clickedElements, setClickedElements] = useState<Set<string>>(new Set());\n  const [cellNotes, setCellNotes] = useState<Record<string, string>>({});\n  \n  // Column visibility states for different tables\n  const [visibleColumns, setVisibleColumns] = useState({\n    balanceSheet: {\n      account: true,\n      balance: true,\n      percentage: true,\n      notes: true,\n      actions: true\n    },\n    performance: {\n      metric: true,\n      current: true,\n      budget: true,\n      variance: true,\n      ytd: true,\n      notes: true,\n      actions: true\n    },\n    cashFlow: {\n      account: true,\n      amount: true,\n      percentage: true,\n      notes: true,\n      actions: true\n    },\n    marketValuation: {\n      scenario: true,\n      capRate: true,\n      impliedValue: true,\n      variance: true,\n      notes: true\n    }\n  });\n\n  // Queries\n  const { data: portfolios = [] } = useQuery({\n    queryKey: ['/api/portfolios'],\n  });\n\n  const { data: currentPortfolio } = useQuery({\n    queryKey: ['/api/portfolios', selectedPortfolio],\n    enabled: !!selectedPortfolio,\n  });\n\n  const { data: properties = [] } = useQuery({\n    queryKey: ['/api/properties'],\n    queryFn: async () => {\n      if (!currentPortfolio?.id) return [];\n      const response = await fetch(`/api/properties?portfolioId=${currentPortfolio.id}`);\n      if (!response.ok) throw new Error('Failed to fetch properties');\n      return response.json();\n    },\n    enabled: !!currentPortfolio?.id,\n  });\n\n  // Auto-select first property when portfolio changes\n  useEffect(() => {\n    if (properties.length > 0 && !selectedPropertyId) {\n      setSelectedPropertyId(properties[0].id);\n    }\n  }, [properties, selectedPropertyId]);\n\n  const selectedProperty = properties.find((p: Property) => p.id === selectedPropertyId) || properties[0];\n\n  const { data: glAccounts = [] } = useQuery({\n    queryKey: ['/api/properties', selectedProperty?.id, 'gl-accounts'],\n    enabled: !!selectedProperty?.id,\n  });\n\n  const { data: notes = [] } = useQuery({\n    queryKey: ['/api/properties', selectedProperty?.id, 'notes'],\n    enabled: !!selectedProperty?.id,\n  });\n\n  const { data: actionItems = [] } = useQuery({\n    queryKey: ['/api/action-items'],\n    queryFn: async () => {\n      const response = await fetch(`/api/action-items${selectedProperty?.id ? `?propertyId=${selectedProperty.id}` : ''}`);\n      if (!response.ok) throw new Error('Failed to fetch action items');\n      return response.json();\n    },\n    enabled: !!selectedProperty?.id,\n  });\n\n  // Cell comments query\n  const { data: cellComments = [], refetch: refetchComments } = useQuery({\n    queryKey: ['/api/cell-comments'],\n    queryFn: async () => {\n      const response = await fetch(`/api/cell-comments${selectedProperty?.id ? `?propertyId=${selectedProperty.id}` : ''}`);\n      if (!response.ok) throw new Error('Failed to fetch cell comments');\n      return response.json();\n    },\n    enabled: !!selectedProperty?.id,\n  });\n\n  // Helper function to get comments for a specific cell\n  const getCellComments = (cellReference: string) => {\n    return cellComments.filter((comment: any) => comment.cellReference === cellReference);\n  };\n\n  // Handle comment creation\n  const handleCommentAdded = () => {\n    refetchComments();\n  };\n\n  // Mutations\n  const createNoteMutation = useMutation({\n    mutationFn: async (noteData: { cellId: string; propertyId: string; text: string }) => {\n      return apiRequest('POST', '/api/notes', noteData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/properties', selectedProperty?.id, 'notes'] });\n      toast({ title: 'Note added successfully', variant: 'default' });\n    },\n    onError: () => {\n      toast({ title: 'Failed to add note', variant: 'destructive' });\n    },\n  });\n\n  const createActionItemMutation = useMutation({\n    mutationFn: async (actionData: { itemId: string; propertyId: string; description: string; priority: string }) => {\n      return apiRequest('POST', '/api/action-items', actionData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/action-items'] });\n      toast({ title: 'Action item created successfully', variant: 'default' });\n    },\n    onError: () => {\n      toast({ title: 'Failed to create action item', variant: 'destructive' });\n    },\n  });\n\n  // Click highlighting function\n  const handleClick = (elementId: string) => {\n    setClickedElements(prev => new Set([...prev, elementId]));\n    setTimeout(() => {\n      setClickedElements(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(elementId);\n        return newSet;\n      });\n    }, 5000);\n  };\n\n  // Portfolio selection\n  const selectPortfolio = (portfolioKey: string) => {\n    setSelectedPortfolio(portfolioKey);\n    setSelectedPropertyId(''); // Reset property selection when portfolio changes\n    handleClick(`portfolio-${portfolioKey}`);\n  };\n\n  const selectProperty = (propertyId: string) => {\n    setSelectedPropertyId(propertyId);\n  };\n\n  // Note handling\n  const handleNoteChange = (cellId: string, value: string) => {\n    setCellNotes(prev => ({ ...prev, [cellId]: value }));\n    \n    if (value.trim() && hartfordProperty?.id) {\n      createNoteMutation.mutate({\n        cellId,\n        propertyId: hartfordProperty.id,\n        text: value.trim()\n      });\n    }\n  };\n\n  // Flag issue\n  const flagIssue = (cellId: string) => {\n    if (!hartfordProperty?.id) return;\n    \n    const description = `Review flagged item for GL account ${cellId.replace('gl-', '')}`;\n    const itemId = `AI-${Date.now()}`;\n    \n    createActionItemMutation.mutate({\n      itemId,\n      propertyId: hartfordProperty.id,\n      description,\n      priority: 'HIGH'\n    });\n  };\n\n  // File upload\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append('excel', file);\n\n    try {\n      const response = await fetch('/api/excel/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const result = await response.json();\n      \n      // Process the file on the frontend\n      const buffer = Uint8Array.from(atob(result.fileBuffer), c => c.charCodeAt(0)).buffer;\n      const processor = new ExcelProcessor();\n      const processedData = await processor.processFile(buffer);\n      \n      console.log('Processed Excel data:', processedData);\n      toast({ title: `Excel file processed: ${result.filename}`, variant: 'default' });\n      \n      // Refresh data\n      queryClient.invalidateQueries();\n      \n    } catch (error) {\n      toast({ title: 'Failed to upload Excel file', variant: 'destructive' });\n    }\n  };\n\n  // Export functions\n  const handleLenderPackageExport = async () => {\n    try {\n      await ExportUtils.exportLenderPackage(selectedPortfolio);\n      toast({ title: 'Lender package exported successfully', variant: 'default' });\n    } catch (error) {\n      toast({ title: 'Failed to export lender package', variant: 'destructive' });\n    }\n  };\n\n  const handleExcelExport = async () => {\n    try {\n      await ExportUtils.exportToExcel(selectedPortfolio);\n      toast({ title: 'Excel export completed successfully', variant: 'default' });\n    } catch (error) {\n      toast({ title: 'Failed to export Excel file', variant: 'destructive' });\n    }\n  };\n\n  const refreshData = () => {\n    queryClient.invalidateQueries();\n    toast({ title: 'Data refreshed', variant: 'default' });\n  };\n\n  // Column visibility toggle functions\n  const toggleColumn = (tableType: string, column: string) => {\n    setVisibleColumns(prev => ({\n      ...prev,\n      [tableType]: {\n        ...prev[tableType as keyof typeof prev],\n        [column]: !prev[tableType as keyof typeof prev][column as keyof typeof prev.balanceSheet]\n      }\n    }));\n  };\n\n  // Column visibility controls component\n  const ColumnVisibilityControls = ({ tableType, columns }: { \n    tableType: string, \n    columns: Array<{ key: string, label: string }> \n  }) => (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"bg-white border-gray-300\">\n          <Settings className=\"w-4 h-4 mr-2\" />\n          COLUMNS\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-64 p-4\">\n        <h4 className=\"font-bold text-sm mb-3 uppercase\">Show/Hide Columns</h4>\n        <div className=\"space-y-3\">\n          {columns.map(({ key, label }) => (\n            <div key={key} className=\"flex items-center space-x-2\">\n              <Checkbox\n                id={`${tableType}-${key}`}\n                checked={visibleColumns[tableType as keyof typeof visibleColumns]?.[key as keyof typeof visibleColumns.balanceSheet] || false}\n                onCheckedChange={() => toggleColumn(tableType, key)}\n              />\n              <label\n                htmlFor={`${tableType}-${key}`}\n                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n              >\n                {label}\n              </label>\n            </div>\n          ))}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n\n  return (\n    <div className=\"font-segoe bg-institutional-white min-h-screen\">\n      {/* Header */}\n      <div className=\"bg-institutional-accent border-b-2 border-institutional-black py-4\">\n        <div className=\"max-w-7xl mx-auto px-5 flex justify-between items-center\">\n          <div>\n            <div className=\"text-xl font-bold text-institutional-black uppercase tracking-wide\">\n              Stanton Management LLC\n            </div>\n            <div className=\"text-xs text-gray-700 uppercase mt-1\">\n              Financial Analysis & Reporting Dashboard\n            </div>\n          </div>\n          <div className=\"flex gap-3\">\n            <div className=\"relative\">\n              <input \n                type=\"file\" \n                id=\"excelUpload\" \n                accept=\".xlsx,.xls\" \n                className=\"hidden\" \n                onChange={handleFileUpload}\n              />\n              <Button\n                onClick={() => document.getElementById('excelUpload')?.click()}\n                className=\"btn-secondary\"\n                size=\"sm\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                UPLOAD EXCEL\n              </Button>\n            </div>\n            <Button onClick={handleLenderPackageExport} className=\"btn-institutional\" size=\"sm\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              LENDER PACKAGE\n            </Button>\n            <Button onClick={handleExcelExport} className=\"btn-secondary\" size=\"sm\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              EXPORT EXCEL\n            </Button>\n            <Button onClick={refreshData} className=\"btn-secondary\" size=\"sm\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              REFRESH DATA\n            </Button>\n            <Link href=\"/accounting-notes\">\n              <Button className=\"btn-institutional\" size=\"sm\">\n                <MessageSquare className=\"w-4 h-4 mr-2\" />\n                ACCOUNTING NOTES\n              </Button>\n            </Link>\n            <Link href=\"/property-management-notes\">\n              <Button className=\"btn-secondary\" size=\"sm\">\n                <Wrench className=\"w-4 h-4 mr-2\" />\n                PM DASHBOARD\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-5\">\n        {/* Portfolio Navigation */}\n        <Card className=\"mb-5 border-2 border-institutional-black\">\n          <CardHeader className=\"bg-institutional-black text-institutional-white p-3 flex flex-row items-center justify-between\">\n            <CardTitle className=\"font-bold text-xs uppercase\">Portfolio Selection</CardTitle>\n            <Button\n              onClick={() => downloadExcelTemplate()}\n              className=\"bg-institutional-white text-institutional-black hover:bg-gray-200 font-bold text-xs px-3 py-1\"\n              size=\"sm\"\n            >\n              <Download className=\"w-3 h-3 mr-1\" />\n              DOWNLOAD TEMPLATE\n            </Button>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"grid grid-cols-5\">\n              {portfolios.map((portfolio: Portfolio) => (\n                <button\n                  key={portfolio.key}\n                  id={`portfolio-${portfolio.key}`}\n                  onClick={() => selectPortfolio(portfolio.key)}\n                  className={`portfolio-item border-r border-institutional-border p-4 text-left hover:bg-institutional-accent transition-all ${\n                    selectedPortfolio === portfolio.key ? 'active bg-blue-50 border-l-4 border-blue-600' : ''\n                  } ${clickedElements.has(`portfolio-${portfolio.key}`) ? 'click-highlight' : ''}`}\n                >\n                  <div className=\"font-bold text-sm text-institutional-black uppercase mb-2\">\n                    {portfolio.name}\n                  </div>\n                  <div className=\"text-xs text-gray-600 grid grid-cols-3 gap-2\">\n                    <span>{portfolio.totalUnits} Units</span>\n                    <span>${Math.round(portfolio.totalNOI / 1000).toLocaleString()}K NOI</span>\n                    <span>{portfolio.capRate}% Cap</span>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Hartford 1 KPI Section */}\n        {selectedPortfolio === 'hartford1' && hartfordProperty && (\n          <Card className=\"bg-institutional-accent border-2 border-institutional-black mb-5\">\n            <CardContent className=\"p-5\">\n              <div className=\"text-sm font-bold uppercase text-institutional-black mb-4\">\n                Hartford 1 Portfolio Metrics - S0010: {hartfordProperty.name}\n              </div>\n              <div className=\"grid grid-cols-6 gap-1 bg-institutional-border\">\n                <div \n                  onClick={() => handleClick('kpi-noi')} \n                  className={`kpi-card bg-institutional-white p-4 text-center cursor-pointer hover:bg-institutional-accent transition-all ${\n                    clickedElements.has('kpi-noi') ? 'click-highlight' : ''\n                  }`}\n                >\n                  <div className=\"text-xs uppercase text-gray-600 mb-2 font-bold\">Monthly NOI</div>\n                  <div className=\"text-2xl font-bold text-institutional-black font-mono-data mb-1\">\n                    ${hartfordProperty.monthlyNOI?.toLocaleString()}\n                  </div>\n                  <div className=\"text-xs font-bold text-success-green\">+8.2% MoM</div>\n                </div>\n                \n                <div \n                  onClick={() => handleClick('kpi-margin')} \n                  className={`kpi-card bg-institutional-white p-4 text-center cursor-pointer hover:bg-institutional-accent transition-all ${\n                    clickedElements.has('kpi-margin') ? 'click-highlight' : ''\n                  }`}\n                >\n                  <div className=\"text-xs uppercase text-gray-600 mb-2 font-bold\">NOI Margin</div>\n                  <div className=\"text-2xl font-bold text-institutional-black font-mono-data mb-1\">\n                    {hartfordProperty.noiMargin}%\n                  </div>\n                  <div className=\"text-xs font-bold text-success-green\">+2.1pp YoY</div>\n                </div>\n                \n                <div \n                  onClick={() => handleClick('kpi-occupancy')} \n                  className={`kpi-card bg-institutional-white p-4 text-center cursor-pointer hover:bg-institutional-accent transition-all ${\n                    clickedElements.has('kpi-occupancy') ? 'click-highlight' : ''\n                  }`}\n                >\n                  <div className=\"text-xs uppercase text-gray-600 mb-2 font-bold\">Occupancy</div>\n                  <div className=\"text-2xl font-bold text-institutional-black font-mono-data mb-1\">\n                    {hartfordProperty.occupancy}%\n                  </div>\n                  <div className=\"text-xs font-bold text-success-green\">+1.2pp MoM</div>\n                </div>\n                \n                <div \n                  onClick={() => handleClick('kpi-revenue')} \n                  className={`kpi-card bg-institutional-white p-4 text-center cursor-pointer hover:bg-institutional-accent transition-all ${\n                    clickedElements.has('kpi-revenue') ? 'click-highlight' : ''\n                  }`}\n                >\n                  <div className=\"text-xs uppercase text-gray-600 mb-2 font-bold\">Revenue/Unit</div>\n                  <div className=\"text-2xl font-bold text-institutional-black font-mono-data mb-1\">\n                    ${hartfordProperty.revenuePerUnit}\n                  </div>\n                  <div className=\"text-xs font-bold text-success-green\">+3.8% MoM</div>\n                </div>\n                \n                <div \n                  onClick={() => handleClick('kpi-cap')} \n                  className={`kpi-card bg-institutional-white p-4 text-center cursor-pointer hover:bg-institutional-accent transition-all ${\n                    clickedElements.has('kpi-cap') ? 'click-highlight' : ''\n                  }`}\n                >\n                  <div className=\"text-xs uppercase text-gray-600 mb-2 font-bold\">Cap Rate</div>\n                  <div className=\"text-2xl font-bold text-institutional-black font-mono-data mb-1\">\n                    {hartfordProperty.capRate}%\n                  </div>\n                  <div className=\"text-xs font-bold text-success-green\">Above Market</div>\n                </div>\n                \n                <div \n                  onClick={() => handleClick('kpi-dscr')} \n                  className={`kpi-card bg-institutional-white p-4 text-center cursor-pointer hover:bg-institutional-accent transition-all ${\n                    clickedElements.has('kpi-dscr') ? 'click-highlight' : ''\n                  }`}\n                >\n                  <div className=\"text-xs uppercase text-gray-600 mb-2 font-bold\">DSCR</div>\n                  <div className=\"text-2xl font-bold text-institutional-black font-mono-data mb-1\">\n                    {hartfordProperty.dscr}x\n                  </div>\n                  <div className=\"text-xs font-bold text-success-green\">Strong</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Tab Navigation */}\n        <Card className=\"border-2 border-institutional-black mb-5\">\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"flex bg-institutional-accent border-b border-institutional-border w-full h-auto p-0 rounded-none\">\n              <TabsTrigger \n                value=\"performance\" \n                className=\"flex-1 bg-institutional-black text-institutional-white border-r border-institutional-border p-4 font-bold text-xs uppercase data-[state=active]:bg-institutional-black data-[state=active]:text-institutional-white data-[state=inactive]:bg-transparent data-[state=inactive]:text-gray-700\"\n                onClick={() => handleClick('tab-performance')}\n              >\n                Performance Analysis\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"operations\" \n                className=\"flex-1 bg-transparent text-gray-700 border-r border-institutional-border p-4 font-bold text-xs uppercase hover:bg-institutional-accent data-[state=active]:bg-institutional-black data-[state=active]:text-institutional-white\"\n                onClick={() => handleClick('tab-operations')}\n              >\n                Operational Review\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"cashflow\" \n                className=\"flex-1 bg-transparent text-gray-700 border-r border-institutional-border p-4 font-bold text-xs uppercase hover:bg-institutional-accent data-[state=active]:bg-institutional-black data-[state=active]:text-institutional-white\"\n                onClick={() => handleClick('tab-cashflow')}\n              >\n                Cash Flow Detail\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"balance\" \n                className=\"flex-1 bg-transparent text-gray-700 border-r border-institutional-border p-4 font-bold text-xs uppercase hover:bg-institutional-accent data-[state=active]:bg-institutional-black data-[state=active]:text-institutional-white\"\n                onClick={() => handleClick('tab-balance')}\n              >\n                Balance Sheet\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"t12\" \n                className=\"flex-1 bg-transparent text-gray-700 border-r border-institutional-border p-4 font-bold text-xs uppercase hover:bg-institutional-accent data-[state=active]:bg-institutional-black data-[state=active]:text-institutional-white\"\n                onClick={() => handleClick('tab-t12')}\n              >\n                T12 Performance\n              </TabsTrigger>\n\n              <TabsTrigger \n                value=\"notes\" \n                className=\"flex-1 bg-transparent text-gray-700 p-4 font-bold text-xs uppercase hover:bg-institutional-accent data-[state=active]:bg-institutional-black data-[state=active]:text-institutional-white\"\n                onClick={() => handleClick('tab-notes')}\n              >\n                Notes & Actions\n              </TabsTrigger>\n            </TabsList>\n\n            <div className=\"p-5\">\n              {/* Performance Analysis Tab */}\n              <TabsContent value=\"performance\" className=\"mt-0\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg font-bold uppercase text-institutional-black\">\n                    Hartford 1 - GL Account Detail\n                  </h3>\n                  <ColumnVisibilityControls \n                    tableType=\"performance\"\n                    columns={[\n                      { key: 'account', label: 'GL Account' },\n                      { key: 'current', label: 'Current Period' },\n                      { key: 'budget', label: 'Budget' },\n                      { key: 'variance', label: 'Variance' },\n                      { key: 'ytd', label: 'YTD' },\n                      { key: 'notes', label: 'Notes' },\n                      { key: 'actions', label: 'Actions' }\n                    ]}\n                  />\n                </div>\n                \n                <div className=\"overflow-hidden border-2 border-institutional-black\">\n                  <table className=\"institutional-table\">\n                    <thead>\n                      <tr>\n                        {visibleColumns.performance.account && <th>GL Code</th>}\n                        {visibleColumns.performance.account && <th>Account Description</th>}\n                        {visibleColumns.performance.current && <th>Current Period</th>}\n                        {visibleColumns.performance.current && <th>Type</th>}\n                        {visibleColumns.performance.notes && <th>Notes</th>}\n                        {visibleColumns.performance.actions && <th>Actions</th>}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {glAccounts.map((account: GLAccount) => {\n                        const cellId = `gl-${account.code}`;\n                        const hasNote = notes.find((note: Note) => note.cellId === cellId);\n                        const isHighMaintenance = account.code === '6110';\n                        \n                        return (\n                          <tr key={account.id}>\n                            <td \n                              onClick={() => handleClick(cellId)} \n                              className={`font-mono-data font-semibold cursor-pointer ${\n                                clickedElements.has(cellId) ? 'click-highlight' : ''\n                              }`}\n                            >\n                              {account.code}\n                            </td>\n                            <td \n                              onClick={() => handleClick(`desc-${account.code}`)} \n                              className={`cursor-pointer ${\n                                clickedElements.has(`desc-${account.code}`) ? 'click-highlight' : ''\n                              }`}\n                            >\n                              {account.description}\n                            </td>\n                            <td \n                              onClick={() => handleClick(`amt-${account.code}`)} \n                              className={`font-mono-data font-semibold cursor-pointer ${\n                                account.type === 'revenue' ? 'text-success-green' : 'text-red-600'\n                              } ${clickedElements.has(`amt-${account.code}`) ? 'click-highlight' : ''}`}\n                            >\n                              {account.type === 'revenue' ? '+' : '-'}${account.amount.toLocaleString()}\n                            </td>\n                            <td className=\"text-center\">\n                              <Badge \n                                variant={account.type === 'revenue' ? 'default' : 'destructive'}\n                                className={`text-[8px] font-bold px-1 py-0 h-4 ${\n                                  account.type === 'revenue' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                                }`}\n                              >\n                                {account.type === 'revenue' ? 'REV' : 'EXP'}\n                              </Badge>\n                            </td>\n                            <td className=\"text-center\">\n                              <Input \n                                type=\"text\" \n                                placeholder=\"Add note...\" \n                                className=\"text-xs border-institutional-border h-6 px-2\" \n                                value={cellNotes[cellId] || ''}\n                                onChange={(e) => handleNoteChange(cellId, e.target.value)}\n                              />\n                              {hasNote && (\n                                <span className=\"note-indicator\">📝 NOTE</span>\n                              )}\n                              {isHighMaintenance && (\n                                <span className=\"alert-indicator\">\n                                  <AlertTriangle className=\"w-3 h-3 inline mr-1\" />\n                                  WATCH\n                                </span>\n                              )}\n                            </td>\n                            <td className=\"text-center\">\n                              <Button \n                                onClick={() => flagIssue(cellId)} \n                                variant=\"destructive\"\n                                size=\"sm\"\n                                className=\"bg-orange-500 hover:bg-orange-600 text-white text-[8px] font-bold px-1.5 py-0 h-5\"\n                              >\n                                <Flag className=\"w-2 h-2 mr-0.5\" />\n                                FLAG\n                              </Button>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              </TabsContent>\n\n              {/* Operational Review Tab */}\n              <TabsContent value=\"operations\" className=\"mt-0\">\n                <h3 className=\"text-lg font-bold uppercase text-institutional-black mb-4\">\n                  Operational Variance Analysis\n                </h3>\n                \n                <div className=\"overflow-hidden border-2 border-institutional-black\">\n                  <table className=\"institutional-table\">\n                    <thead>\n                      <tr>\n                        <th>Metric</th>\n                        <th>Current Month</th>\n                        <th>Prior Month</th>\n                        <th>Variance</th>\n                        <th>Threshold</th>\n                        <th>Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>Maintenance/Unit</td>\n                        <td className=\"font-mono-data\">$308.33</td>\n                        <td className=\"font-mono-data\">$125.00</td>\n                        <td className=\"font-mono-data text-red-600\">+146.7%</td>\n                        <td className=\"font-mono-data\">+25%</td>\n                        <td>\n                          <span className=\"alert-indicator\">\n                            <AlertTriangle className=\"w-3 h-3 inline mr-1\" />\n                            REVIEW\n                          </span>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Utilities/Unit</td>\n                        <td className=\"font-mono-data\">$70.00</td>\n                        <td className=\"font-mono-data\">$65.00</td>\n                        <td className=\"font-mono-data text-success-green\">+7.7%</td>\n                        <td className=\"font-mono-data\">+15%</td>\n                        <td>\n                          <span className=\"text-success-green font-bold\">✓ NORMAL</span>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </TabsContent>\n\n              {/* Cash Flow Detail Tab */}\n              <TabsContent value=\"cashflow\" className=\"mt-0\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg font-bold uppercase text-institutional-black\">\n                    Hartford 1 - Detailed Cash Flow by GL Account\n                  </h3>\n                  <ColumnVisibilityControls \n                    tableType=\"cashFlow\"\n                    columns={[\n                      { key: 'account', label: 'GL Account' },\n                      { key: 'amount', label: 'Amount & Type' },\n                      { key: 'notes', label: 'Notes' },\n                      { key: 'actions', label: 'Actions' }\n                    ]}\n                  />\n                </div>\n                \n                <div className=\"overflow-hidden border-2 border-institutional-black\">\n                  <table className=\"institutional-table\">\n                    <thead>\n                      <tr>\n                        {visibleColumns.cashFlow.account && <th>GL Code</th>}\n                        {visibleColumns.cashFlow.account && <th>Account Description</th>}\n                        {visibleColumns.cashFlow.amount && <th>Amount</th>}\n                        {visibleColumns.cashFlow.amount && <th>Type</th>}\n                        {visibleColumns.cashFlow.notes && <th>Notes</th>}\n                        {visibleColumns.cashFlow.actions && <th>Actions</th>}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {glAccounts\n                        .filter((account: GLAccount) => account.amount !== 0)\n                        .sort((a: GLAccount, b: GLAccount) => {\n                          // Sort by type (revenue first) then by GL code\n                          if (a.type !== b.type) {\n                            return a.type === 'revenue' ? -1 : 1;\n                          }\n                          return a.code.localeCompare(b.code);\n                        })\n                        .map((account: GLAccount) => {\n                          const cellId = `cashflow-gl-${account.code}`;\n                          const hasNote = notes.some((note: Note) => note.cellId === cellId);\n                          \n                          return (\n                            <tr key={account.id}>\n                              {visibleColumns.cashFlow.account && (\n                                <td \n                                  onClick={() => handleClick(`${cellId}-code`)}\n                                  className={`font-mono-data font-bold text-center cursor-pointer transition-all ${\n                                    clickedElements.has(`${cellId}-code`) ? 'click-highlight' : ''\n                                  }`}\n                                >\n                                  {account.code}\n                                </td>\n                              )}\n                              {visibleColumns.cashFlow.account && (\n                                <td \n                                  onClick={() => handleClick(`${cellId}-desc`)}\n                                  className={`cursor-pointer transition-all ${\n                                    clickedElements.has(`${cellId}-desc`) ? 'click-highlight' : ''\n                                  }`}\n                                >\n                                  {account.description}\n                                </td>\n                              )}\n                              {visibleColumns.cashFlow.amount && (\n                                <td \n                                  onClick={() => handleClick(cellId)}\n                                  className={`font-mono-data font-bold text-right cursor-pointer transition-all ${\n                                    account.type === 'revenue' ? 'text-success-green' : 'text-red-600'\n                                  } ${clickedElements.has(cellId) ? 'click-highlight' : ''}`}\n                                >\n                                  {account.type === 'revenue' ? '+' : '-'}${Math.abs(account.amount).toLocaleString()}\n                                  {hasNote && (\n                                    <span className=\"note-indicator ml-2\">📝 NOTE</span>\n                                  )}\n                                </td>\n                              )}\n                              {visibleColumns.cashFlow.amount && (\n                                <td className=\"text-center\">\n                                  <Badge \n                                    variant={account.type === 'revenue' ? 'default' : 'destructive'}\n                                    className={`text-[8px] font-bold px-1 py-0 h-4 ${\n                                      account.type === 'revenue' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                                    }`}\n                                  >\n                                    {account.type === 'revenue' ? 'REV' : 'EXP'}\n                                  </Badge>\n                                </td>\n                              )}\n                              {visibleColumns.cashFlow.notes && (\n                                <td className=\"text-center\">\n                                  <Input\n                                    placeholder=\"Add note...\"\n                                    className=\"text-xs border-institutional-border h-6 px-2\"\n                                    onBlur={(e) => {\n                                      if (e.target.value.trim()) {\n                                        handleNoteChange(cellId, e.target.value);\n                                        e.target.value = '';\n                                      }\n                                    }}\n                                    onKeyPress={(e) => {\n                                      if (e.key === 'Enter') {\n                                        const input = e.target as HTMLInputElement;\n                                        if (input.value.trim()) {\n                                          handleNoteChange(cellId, input.value);\n                                          input.value = '';\n                                        }\n                                      }\n                                    }}\n                                  />\n                                </td>\n                              )}\n                              {visibleColumns.cashFlow.actions && (\n                                <td className=\"text-center\">\n                                  <Button\n                                    onClick={() => flagIssue(cellId)}\n                                    variant=\"destructive\"\n                                    size=\"sm\"\n                                    className=\"bg-orange-500 hover:bg-orange-600 text-white text-[8px] font-bold px-1.5 py-0 h-5\"\n                                  >\n                                    <Flag className=\"w-2 h-2 mr-0.5\" />\n                                    FLAG\n                                  </Button>\n                                </td>\n                              )}\n                            </tr>\n                          );\n                        })}\n                      \n                      {/* Summary rows */}\n                      <tr className=\"bg-green-50 border-t-2 border-institutional-black\">\n                        <td colSpan={2} className=\"font-bold text-right\">TOTAL REVENUE:</td>\n                        <td className=\"font-mono-data font-bold text-success-green text-right\">\n                          +${glAccounts\n                            .filter((acc: GLAccount) => acc.type === 'revenue')\n                            .reduce((sum: number, acc: GLAccount) => sum + acc.amount, 0)\n                            .toLocaleString()}\n                        </td>\n                        <td colSpan={3}></td>\n                      </tr>\n                      \n                      <tr className=\"bg-red-50\">\n                        <td colSpan={2} className=\"font-bold text-right\">TOTAL EXPENSES:</td>\n                        <td className=\"font-mono-data font-bold text-red-600 text-right\">\n                          -${glAccounts\n                            .filter((acc: GLAccount) => acc.type === 'expense')\n                            .reduce((sum: number, acc: GLAccount) => sum + acc.amount, 0)\n                            .toLocaleString()}\n                        </td>\n                        <td colSpan={3}></td>\n                      </tr>\n                      \n                      <tr className=\"bg-blue-50 border-t-2 border-institutional-black\">\n                        <td colSpan={2} className=\"font-bold text-right\">NET OPERATING INCOME:</td>\n                        <td className=\"font-mono-data font-bold text-institutional-black text-right\">\n                          ${(\n                            glAccounts\n                              .filter((acc: GLAccount) => acc.type === 'revenue')\n                              .reduce((sum: number, acc: GLAccount) => sum + acc.amount, 0) -\n                            glAccounts\n                              .filter((acc: GLAccount) => acc.type === 'expense')\n                              .reduce((sum: number, acc: GLAccount) => sum + acc.amount, 0)\n                          ).toLocaleString()}\n                        </td>\n                        <td colSpan={3}></td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                \n                {/* Detailed Line Item Breakdown */}\n                <div className=\"mt-5 overflow-hidden border-2 border-institutional-black\">\n                  <div className=\"bg-institutional-black text-institutional-white p-2\">\n                    <h4 className=\"font-bold text-xs uppercase\">Every Non-Zero Line Item Detail</h4>\n                  </div>\n                  <table className=\"institutional-table\">\n                    <thead>\n                      <tr>\n                        <th>GL Code</th>\n                        <th>Description</th>\n                        <th>Current</th>\n                        <th>Prior Month</th>\n                        <th>Variance $</th>\n                        <th>Variance %</th>\n                        <th>YTD</th>\n                        <th>Budget vs Actual</th>\n                        <th>Per Unit</th>\n                        <th>Risk Flag</th>\n                        <th>Notes</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">4105</td>\n                        <td>Rental Income - Gross</td>\n                        <td className=\"font-mono-data font-bold text-success-green\">+$10,200</td>\n                        <td className=\"font-mono-data\">+$9,950</td>\n                        <td className=\"font-mono-data text-success-green\">+$250</td>\n                        <td className=\"font-mono-data text-success-green\">+2.5%</td>\n                        <td className=\"font-mono-data font-bold\">$121,800</td>\n                        <td className=\"font-mono-data text-success-green\">+3.2% vs Budget</td>\n                        <td className=\"font-mono-data\">$1,700</td>\n                        <td><span className=\"text-success-green font-bold\">✓ NORMAL</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Add note...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            onClick={() => flagIssue('gl-4105')}\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"bg-orange-500 hover:bg-orange-600 text-white text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            <Flag className=\"w-2 h-2 mr-0.5\" />\n                            FLAG\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">4110</td>\n                        <td>Section 8 Housing Assistance</td>\n                        <td className=\"font-mono-data font-bold text-success-green\">+$300</td>\n                        <td className=\"font-mono-data\">+$300</td>\n                        <td className=\"font-mono-data\">$0</td>\n                        <td className=\"font-mono-data\">0.0%</td>\n                        <td className=\"font-mono-data font-bold\">$3,600</td>\n                        <td className=\"font-mono-data text-success-green\">On Budget</td>\n                        <td className=\"font-mono-data\">$50</td>\n                        <td><span className=\"text-success-green font-bold\">✓ STABLE</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Add note...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            MONITOR\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">4120</td>\n                        <td>Late Fees & Other Income</td>\n                        <td className=\"font-mono-data font-bold text-success-green\">+$85</td>\n                        <td className=\"font-mono-data\">+$45</td>\n                        <td className=\"font-mono-data text-orange-600\">+$40</td>\n                        <td className=\"font-mono-data text-orange-600\">+88.9%</td>\n                        <td className=\"font-mono-data font-bold\">$720</td>\n                        <td className=\"font-mono-data text-orange-600\">+45% vs Budget</td>\n                        <td className=\"font-mono-data\">$14</td>\n                        <td><span className=\"text-orange-600 font-bold\">⚠ WATCH</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Add note...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            onClick={() => flagIssue('gl-4120')}\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"bg-orange-500 hover:bg-orange-600 text-white text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            <Flag className=\"w-2 h-2 mr-0.5\" />\n                            REVIEW\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">6105</td>\n                        <td>Property Management Fees</td>\n                        <td className=\"font-mono-data font-bold text-red-600\">-$630</td>\n                        <td className=\"font-mono-data\">-$598</td>\n                        <td className=\"font-mono-data text-red-600\">-$32</td>\n                        <td className=\"font-mono-data text-red-600\">-5.3%</td>\n                        <td className=\"font-mono-data font-bold\">-$7,320</td>\n                        <td className=\"font-mono-data text-success-green\">-2.1% vs Budget</td>\n                        <td className=\"font-mono-data\">-$105</td>\n                        <td><span className=\"text-success-green font-bold\">✓ NORMAL</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Add note...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            MONITOR\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">6110</td>\n                        <td>Maintenance & Repairs</td>\n                        <td className=\"font-mono-data font-bold text-red-600\">-$1,850</td>\n                        <td className=\"font-mono-data\">-$750</td>\n                        <td className=\"font-mono-data text-red-600\">-$1,100</td>\n                        <td className=\"font-mono-data text-red-600\">-146.7%</td>\n                        <td className=\"font-mono-data font-bold\">-$14,200</td>\n                        <td className=\"font-mono-data text-red-600\">+67% vs Budget</td>\n                        <td className=\"font-mono-data\">-$308</td>\n                        <td><span className=\"text-red-600 font-bold\">🚨 CRITICAL</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"HVAC repairs, plumbing...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            onClick={() => flagIssue('gl-6110')}\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"bg-red-600 hover:bg-red-700 text-white text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            <Flag className=\"w-2 h-2 mr-0.5\" />\n                            URGENT\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">6115</td>\n                        <td>Landscaping & Grounds</td>\n                        <td className=\"font-mono-data font-bold text-red-600\">-$285</td>\n                        <td className=\"font-mono-data\">-$200</td>\n                        <td className=\"font-mono-data text-red-600\">-$85</td>\n                        <td className=\"font-mono-data text-red-600\">-42.5%</td>\n                        <td className=\"font-mono-data font-bold\">-$2,850</td>\n                        <td className=\"font-mono-data text-orange-600\">+15% vs Budget</td>\n                        <td className=\"font-mono-data\">-$48</td>\n                        <td><span className=\"text-orange-600 font-bold\">⚠ SEASONAL</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Winter prep work...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            onClick={() => flagIssue('gl-6115')}\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"bg-orange-500 hover:bg-orange-600 text-white text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            <Flag className=\"w-2 h-2 mr-0.5\" />\n                            TRACK\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">6120</td>\n                        <td>Utilities - Common Areas</td>\n                        <td className=\"font-mono-data font-bold text-red-600\">-$420</td>\n                        <td className=\"font-mono-data\">-$390</td>\n                        <td className=\"font-mono-data text-red-600\">-$30</td>\n                        <td className=\"font-mono-data text-red-600\">-7.7%</td>\n                        <td className=\"font-mono-data font-bold\">-$4,680</td>\n                        <td className=\"font-mono-data text-success-green\">-5% vs Budget</td>\n                        <td className=\"font-mono-data\">-$70</td>\n                        <td><span className=\"text-success-green font-bold\">✓ NORMAL</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Add note...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            MONITOR\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">6140</td>\n                        <td>Real Estate Taxes</td>\n                        <td className=\"font-mono-data font-bold text-red-600\">-$815</td>\n                        <td className=\"font-mono-data\">-$815</td>\n                        <td className=\"font-mono-data\">$0</td>\n                        <td className=\"font-mono-data\">0.0%</td>\n                        <td className=\"font-mono-data font-bold\">-$9,780</td>\n                        <td className=\"font-mono-data text-success-green\">On Budget</td>\n                        <td className=\"font-mono-data\">-$136</td>\n                        <td><span className=\"text-success-green font-bold\">✓ STABLE</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Add note...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            MONITOR\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">6130</td>\n                        <td>Property Insurance</td>\n                        <td className=\"font-mono-data font-bold text-red-600\">-$285</td>\n                        <td className=\"font-mono-data\">-$285</td>\n                        <td className=\"font-mono-data\">$0</td>\n                        <td className=\"font-mono-data\">0.0%</td>\n                        <td className=\"font-mono-data font-bold\">-$3,420</td>\n                        <td className=\"font-mono-data text-success-green\">On Budget</td>\n                        <td className=\"font-mono-data\">-$48</td>\n                        <td><span className=\"text-success-green font-bold\">✓ STABLE</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Add note...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            MONITOR\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">6145</td>\n                        <td>Legal & Professional</td>\n                        <td className=\"font-mono-data font-bold text-red-600\">-$125</td>\n                        <td className=\"font-mono-data\">-$0</td>\n                        <td className=\"font-mono-data text-red-600\">-$125</td>\n                        <td className=\"font-mono-data text-red-600\">New Expense</td>\n                        <td className=\"font-mono-data font-bold\">-$450</td>\n                        <td className=\"font-mono-data text-red-600\">+200% vs Budget</td>\n                        <td className=\"font-mono-data\">-$21</td>\n                        <td><span className=\"text-orange-600 font-bold\">⚠ NEW</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Eviction proceedings...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            onClick={() => flagIssue('gl-6145')}\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"bg-orange-500 hover:bg-orange-600 text-white text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            <Flag className=\"w-2 h-2 mr-0.5\" />\n                            REVIEW\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">6150</td>\n                        <td>Marketing & Leasing</td>\n                        <td className=\"font-mono-data font-bold text-red-600\">-$45</td>\n                        <td className=\"font-mono-data\">-$85</td>\n                        <td className=\"font-mono-data text-success-green\">+$40</td>\n                        <td className=\"font-mono-data text-success-green\">+47.1%</td>\n                        <td className=\"font-mono-data font-bold\">-$720</td>\n                        <td className=\"font-mono-data text-success-green\">-15% vs Budget</td>\n                        <td className=\"font-mono-data\">-$8</td>\n                        <td><span className=\"text-success-green font-bold\">✓ LOW</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Add note...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                        <td className=\"text-center\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            MONITOR\n                          </Button>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </TabsContent>\n\n              {/* Balance Sheet Analysis Tab */}\n              <TabsContent value=\"balance\" className=\"mt-0\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg font-bold uppercase text-institutional-black\">\n                    Balance Sheet Analysis & DSCR Calculations\n                  </h3>\n                  <ColumnVisibilityControls \n                    tableType=\"balanceSheet\"\n                    columns={[\n                      { key: 'account', label: 'Account & Description' },\n                      { key: 'balance', label: 'Balance & Value' },\n                      { key: 'percentage', label: 'Percentage & Ratios' },\n                      { key: 'notes', label: 'Notes & Commentary' },\n                      { key: 'actions', label: 'Actions & Status' }\n                    ]}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-5 mb-5\">\n                  <div className=\"overflow-hidden border-2 border-institutional-black\">\n                    <div className=\"bg-institutional-black text-institutional-white p-2\">\n                      <h4 className=\"font-bold text-xs uppercase\">Asset Analysis</h4>\n                    </div>\n                    <table className=\"institutional-table\">\n                      <thead>\n                        <tr>\n                          <th>Asset Category</th>\n                          <th>Amount</th>\n                          <th>% of Total</th>\n                          <th>Risk Score</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>Property Value (Appraised)</td>\n                          <td className=\"font-mono-data font-bold\">$2,840,000</td>\n                          <td className=\"font-mono-data\">87.2%</td>\n                          <td><span className=\"text-success-green font-bold\">LOW</span></td>\n                        </tr>\n                        <tr>\n                          <td>Cash & Equivalents</td>\n                          <td className=\"font-mono-data font-bold\">$156,000</td>\n                          <td className=\"font-mono-data\">4.8%</td>\n                          <td><span className=\"text-success-green font-bold\">LOW</span></td>\n                        </tr>\n                        <tr>\n                          <td>Tenant Security Deposits</td>\n                          <td className=\"font-mono-data font-bold\">$48,200</td>\n                          <td className=\"font-mono-data\">1.5%</td>\n                          <td><span className=\"text-success-green font-bold\">LOW</span></td>\n                        </tr>\n                        <tr>\n                          <td>Accounts Receivable</td>\n                          <td className=\"font-mono-data font-bold\">$21,800</td>\n                          <td className=\"font-mono-data\">0.7%</td>\n                          <td><span className=\"text-red-600 font-bold\">MEDIUM</span></td>\n                        </tr>\n                        <tr className=\"bg-blue-50 border-t-2 border-institutional-black\">\n                          <td className=\"font-bold\">TOTAL ASSETS</td>\n                          <td className=\"font-mono-data font-bold\">$3,066,000</td>\n                          <td className=\"font-mono-data font-bold\">100.0%</td>\n                          <td></td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                  \n                  <div className=\"overflow-hidden border-2 border-institutional-black\">\n                    <div className=\"bg-institutional-black text-institutional-white p-2\">\n                      <h4 className=\"font-bold text-xs uppercase\">Debt Analysis</h4>\n                    </div>\n                    <table className=\"institutional-table\">\n                      <thead>\n                        <tr>\n                          <th>Debt Category</th>\n                          <th>Balance</th>\n                          <th>Rate</th>\n                          <th>Maturity</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>Primary Mortgage</td>\n                          <td className=\"font-mono-data font-bold\">$1,820,000</td>\n                          <td className=\"font-mono-data\">4.25%</td>\n                          <td className=\"font-mono-data\">2029</td>\n                        </tr>\n                        <tr>\n                          <td>Line of Credit</td>\n                          <td className=\"font-mono-data font-bold\">$125,000</td>\n                          <td className=\"font-mono-data\">6.75%</td>\n                          <td className=\"font-mono-data\">Revolving</td>\n                        </tr>\n                        <tr>\n                          <td>Tenant Deposits (Liability)</td>\n                          <td className=\"font-mono-data font-bold\">$48,200</td>\n                          <td className=\"font-mono-data\">0.00%</td>\n                          <td className=\"font-mono-data\">On-Demand</td>\n                        </tr>\n                        <tr className=\"bg-red-50 border-t-2 border-institutional-black\">\n                          <td className=\"font-bold\">TOTAL LIABILITIES</td>\n                          <td className=\"font-mono-data font-bold\">$1,993,200</td>\n                          <td className=\"font-mono-data font-bold\">Blended: 4.56%</td>\n                          <td></td>\n                        </tr>\n                        <tr className=\"bg-green-50\">\n                          <td className=\"font-bold\">OWNER EQUITY</td>\n                          <td className=\"font-mono-data font-bold\">$1,072,800</td>\n                          <td className=\"font-mono-data font-bold\">35.0% LTV</td>\n                          <td></td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n                \n                <div className=\"overflow-hidden border-2 border-institutional-black\">\n                  <div className=\"bg-institutional-black text-institutional-white p-2\">\n                    <h4 className=\"font-bold text-xs uppercase\">DSCR Analysis & Covenant Compliance</h4>\n                  </div>\n                  <table className=\"institutional-table\">\n                    <thead>\n                      <tr>\n                        <th>Metric</th>\n                        <th>Current</th>\n                        <th>Required</th>\n                        <th>Variance</th>\n                        <th>Trend (12M)</th>\n                        <th>Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>Debt Service Coverage Ratio</td>\n                        <ClickableCell\n                          cellReference=\"Balance Sheet > DSCR > Current Ratio\"\n                          cellValue=\"2.15x\"\n                          tabSection=\"Balance Sheet\"\n                          propertyCode=\"S0010\"\n                          comments={getCellComments(\"Balance Sheet > DSCR > Current Ratio\")}\n                          onCommentAdded={handleCommentAdded}\n                          className=\"font-mono-data font-bold text-success-green\"\n                        >\n                          2.15x\n                        </ClickableCell>\n                        <td className=\"font-mono-data\">1.25x</td>\n                        <td className=\"font-mono-data text-success-green\">+72.0%</td>\n                        <td className=\"font-mono-data text-success-green\">↗ +8.5%</td>\n                        <td><span className=\"text-success-green font-bold\">✓ COMPLIANT</span></td>\n                      </tr>\n                      <tr>\n                        <td>Loan-to-Value Ratio</td>\n                        <td className=\"font-mono-data font-bold\">65.0%</td>\n                        <td className=\"font-mono-data\">75.0%</td>\n                        <td className=\"font-mono-data text-success-green\">-10.0pp</td>\n                        <td className=\"font-mono-data text-success-green\">↘ -2.1pp</td>\n                        <td><span className=\"text-success-green font-bold\">✓ COMPLIANT</span></td>\n                      </tr>\n                      <tr>\n                        <td>Minimum NOI (Covenant)</td>\n                        <ClickableCell\n                          cellReference=\"Balance Sheet > DSCR > NOI Current\"\n                          cellValue=\"$81,600\"\n                          tabSection=\"Balance Sheet\"\n                          propertyCode=\"S0010\"\n                          comments={getCellComments(\"Balance Sheet > DSCR > NOI Current\")}\n                          onCommentAdded={handleCommentAdded}\n                          className=\"font-mono-data font-bold\"\n                        >\n                          $81,600\n                        </ClickableCell>\n                        <td className=\"font-mono-data\">$65,000</td>\n                        <td className=\"font-mono-data text-success-green\">+25.5%</td>\n                        <td className=\"font-mono-data text-success-green\">↗ +12.8%</td>\n                        <td><span className=\"text-success-green font-bold\">✓ COMPLIANT</span></td>\n                      </tr>\n                      <tr>\n                        <td>Occupancy Requirement</td>\n                        <td className=\"font-mono-data font-bold\">94.5%</td>\n                        <td className=\"font-mono-data\">85.0%</td>\n                        <td className=\"font-mono-data text-success-green\">+9.5pp</td>\n                        <td className=\"font-mono-data text-success-green\">↗ +4.2pp</td>\n                        <td><span className=\"text-success-green font-bold\">✓ COMPLIANT</span></td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Market Valuation Analysis */}\n                <div className=\"mt-5 overflow-hidden border-2 border-institutional-black\">\n                  <div className=\"bg-institutional-black text-institutional-white p-2\">\n                    <h4 className=\"font-bold text-xs uppercase\">Market Valuation & Cap Rate Analysis</h4>\n                  </div>\n                  <table className=\"institutional-table\">\n                    <thead>\n                      <tr>\n                        <th>Valuation Method</th>\n                        <th>Cap Rate</th>\n                        <th>NOI Basis</th>\n                        <th>Implied Value</th>\n                        <th>vs Book Value</th>\n                        <th>Market Position</th>\n                        <th>Confidence</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td className=\"font-bold\">Current Market Cap Rate</td>\n                        <td className=\"font-mono-data font-bold text-success-green\">12.20%</td>\n                        <td className=\"font-mono-data\">$81,600</td>\n                        <td className=\"font-mono-data font-bold text-success-green\">$668,852</td>\n                        <td className=\"font-mono-data text-red-600\">-28.1%</td>\n                        <td><span className=\"text-success-green font-bold\">UNDERVALUED</span></td>\n                        <td><span className=\"text-success-green font-bold\">HIGH</span></td>\n                      </tr>\n                      <tr>\n                        <td>Conservative Cap Rate</td>\n                        <td className=\"font-mono-data\">13.50%</td>\n                        <td className=\"font-mono-data\">$81,600</td>\n                        <td className=\"font-mono-data\">$604,444</td>\n                        <td className=\"font-mono-data text-red-600\">-35.0%</td>\n                        <td><span className=\"text-success-green font-bold\">UNDERVALUED</span></td>\n                        <td><span className=\"text-orange-600 font-bold\">MEDIUM</span></td>\n                      </tr>\n                      <tr>\n                        <td>Aggressive Cap Rate</td>\n                        <td className=\"font-mono-data\">10.75%</td>\n                        <td className=\"font-mono-data\">$81,600</td>\n                        <td className=\"font-mono-data font-bold\">$759,070</td>\n                        <td className=\"font-mono-data text-red-600\">-18.3%</td>\n                        <td><span className=\"text-success-green font-bold\">UNDERVALUED</span></td>\n                        <td><span className=\"text-red-600 font-bold\">LOW</span></td>\n                      </tr>\n                      <tr>\n                        <td>Stabilized NOI (T12)</td>\n                        <td className=\"font-mono-data\">12.20%</td>\n                        <td className=\"font-mono-data\">$87,200</td>\n                        <td className=\"font-mono-data font-bold text-success-green\">$714,754</td>\n                        <td className=\"font-mono-data text-red-600\">-23.2%</td>\n                        <td><span className=\"text-success-green font-bold\">UNDERVALUED</span></td>\n                        <td><span className=\"text-success-green font-bold\">HIGH</span></td>\n                      </tr>\n                      <tr>\n                        <td>Pro-Forma (Full Occupancy)</td>\n                        <td className=\"font-mono-data\">12.20%</td>\n                        <td className=\"font-mono-data\">$91,800</td>\n                        <td className=\"font-mono-data font-bold text-success-green\">$752,459</td>\n                        <td className=\"font-mono-data text-red-600\">-19.1%</td>\n                        <td><span className=\"text-success-green font-bold\">UNDERVALUED</span></td>\n                        <td><span className=\"text-orange-600 font-bold\">MEDIUM</span></td>\n                      </tr>\n                      <tr className=\"bg-blue-50 border-t-2 border-institutional-black\">\n                        <td className=\"font-bold\">Market Value Range</td>\n                        <td className=\"font-mono-data font-bold\">10.75%-13.50%</td>\n                        <td className=\"font-mono-data font-bold\">$81.6K-$91.8K</td>\n                        <td className=\"font-mono-data font-bold\">$604K-$759K</td>\n                        <td className=\"font-mono-data font-bold\">-35.0% to -18.3%</td>\n                        <td><span className=\"text-success-green font-bold\">STRONG BUY</span></td>\n                        <td><span className=\"text-success-green font-bold\">HIGH</span></td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Cap Rate Sensitivity Analysis */}\n                <div className=\"mt-5 overflow-hidden border-2 border-institutional-black\">\n                  <div className=\"bg-institutional-black text-institutional-white p-2\">\n                    <h4 className=\"font-bold text-xs uppercase\">Cap Rate Sensitivity Matrix</h4>\n                  </div>\n                  <table className=\"institutional-table\">\n                    <thead>\n                      <tr>\n                        <th>NOI Scenario</th>\n                        <th>9.50% Cap</th>\n                        <th>10.75% Cap</th>\n                        <th>12.20% Cap</th>\n                        <th>13.50% Cap</th>\n                        <th>15.00% Cap</th>\n                        <th>Market Commentary</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>Bear Case ($75K NOI)</td>\n                        <td className=\"font-mono-data\">$789,474</td>\n                        <td className=\"font-mono-data\">$697,674</td>\n                        <td className=\"font-mono-data\">$614,754</td>\n                        <td className=\"font-mono-data\">$555,556</td>\n                        <td className=\"font-mono-data\">$500,000</td>\n                        <td className=\"text-red-600 text-xs\">Recession scenario</td>\n                      </tr>\n                      <tr>\n                        <td>Current NOI ($81.6K)</td>\n                        <td className=\"font-mono-data\">$858,947</td>\n                        <td className=\"font-mono-data\">$759,070</td>\n                        <td className=\"font-mono-data font-bold\">$668,852</td>\n                        <td className=\"font-mono-data\">$604,444</td>\n                        <td className=\"font-mono-data\">$544,000</td>\n                        <td className=\"text-institutional-black text-xs\">Current performance</td>\n                      </tr>\n                      <tr>\n                        <td>Stabilized ($87.2K)</td>\n                        <td className=\"font-mono-data\">$918,421</td>\n                        <td className=\"font-mono-data\">$811,163</td>\n                        <td className=\"font-mono-data font-bold\">$714,754</td>\n                        <td className=\"font-mono-data\">$645,926</td>\n                        <td className=\"font-mono-data\">$581,333</td>\n                        <td className=\"text-success-green text-xs\">12-month target</td>\n                      </tr>\n                      <tr>\n                        <td>Bull Case ($95K NOI)</td>\n                        <td className=\"font-mono-data\">$1,000,000</td>\n                        <td className=\"font-mono-data\">$883,721</td>\n                        <td className=\"font-mono-data font-bold\">$778,689</td>\n                        <td className=\"font-mono-data\">$703,704</td>\n                        <td className=\"font-mono-data\">$633,333</td>\n                        <td className=\"text-success-green text-xs\">Full optimization</td>\n                      </tr>\n                      <tr className=\"bg-yellow-50\">\n                        <td className=\"font-bold\">Book Value Reference</td>\n                        <td className=\"font-mono-data font-bold\">$930,000</td>\n                        <td className=\"font-mono-data font-bold\">$930,000</td>\n                        <td className=\"font-mono-data font-bold\">$930,000</td>\n                        <td className=\"font-mono-data font-bold\">$930,000</td>\n                        <td className=\"font-mono-data font-bold\">$930,000</td>\n                        <td className=\"text-institutional-black text-xs font-bold\">Current book basis</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                \n                {/* Detailed Asset Line Items beneath Balance Sheet */}\n                <div className=\"mt-5 overflow-hidden border-2 border-institutional-black\">\n                  <div className=\"bg-institutional-black text-institutional-white p-2\">\n                    <h4 className=\"font-bold text-xs uppercase\">Detailed Asset Line Items</h4>\n                  </div>\n                  <table className=\"institutional-table\">\n                    <thead>\n                      <tr>\n                        <th>Asset Code</th>\n                        <th>Description</th>\n                        <th>Current Value</th>\n                        <th>Prior Period</th>\n                        <th>Variance</th>\n                        <th>Appreciation</th>\n                        <th>Risk Level</th>\n                        <th>Notes</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">1100</td>\n                        <td>Land Value</td>\n                        <td className=\"font-mono-data font-bold\">$850,000</td>\n                        <td className=\"font-mono-data\">$840,000</td>\n                        <td className=\"font-mono-data text-success-green\">+$10,000</td>\n                        <td className=\"font-mono-data text-success-green\">+1.2%</td>\n                        <td><span className=\"text-success-green font-bold\">LOW</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Market comp analysis...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">1200</td>\n                        <td>Building & Improvements</td>\n                        <td className=\"font-mono-data font-bold\">$1,990,000</td>\n                        <td className=\"font-mono-data\">$2,010,000</td>\n                        <td className=\"font-mono-data text-red-600\">-$20,000</td>\n                        <td className=\"font-mono-data text-red-600\">-1.0%</td>\n                        <td><span className=\"text-orange-600 font-bold\">MEDIUM</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Depreciation schedule...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">1110</td>\n                        <td>Operating Cash</td>\n                        <td className=\"font-mono-data font-bold\">$156,000</td>\n                        <td className=\"font-mono-data\">$142,000</td>\n                        <td className=\"font-mono-data text-success-green\">+$14,000</td>\n                        <td className=\"font-mono-data text-success-green\">+9.9%</td>\n                        <td><span className=\"text-success-green font-bold\">LOW</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Cash flow timing...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </TabsContent>\n\n              {/* T12 Performance Tab */}\n              <TabsContent value=\"t12\" className=\"mt-0\">\n                <h3 className=\"text-lg font-bold uppercase text-institutional-black mb-4\">\n                  Trailing 12-Month Performance Analysis\n                </h3>\n                \n                <div className=\"grid grid-cols-2 gap-5 mb-5\">\n                  <div className=\"overflow-hidden border-2 border-institutional-black\">\n                    <div className=\"bg-institutional-black text-institutional-white p-2\">\n                      <h4 className=\"font-bold text-xs uppercase\">Revenue Volatility Analysis</h4>\n                    </div>\n                    <table className=\"institutional-table\">\n                      <thead>\n                        <tr>\n                          <th>Revenue Metric</th>\n                          <th>T12 Average</th>\n                          <th>Std Dev</th>\n                          <th>Volatility Score</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>Monthly Gross Rent</td>\n                          <td className=\"font-mono-data\">$10,483</td>\n                          <td className=\"font-mono-data\">$287</td>\n                          <td><span className=\"text-success-green font-bold\">LOW (2.7%)</span></td>\n                        </tr>\n                        <tr>\n                          <td>Occupancy Rate</td>\n                          <td className=\"font-mono-data\">92.8%</td>\n                          <td className=\"font-mono-data\">3.1pp</td>\n                          <td><span className=\"text-success-green font-bold\">LOW (3.3%)</span></td>\n                        </tr>\n                        <tr>\n                          <td>Other Income</td>\n                          <td className=\"font-mono-data\">$127</td>\n                          <td className=\"font-mono-data\">$89</td>\n                          <td><span className=\"text-orange-600 font-bold\">HIGH (70.1%)</span></td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                  \n                  <div className=\"overflow-hidden border-2 border-institutional-black\">\n                    <div className=\"bg-institutional-black text-institutional-white p-2\">\n                      <h4 className=\"font-bold text-xs uppercase\">Seasonal Performance</h4>\n                    </div>\n                    <table className=\"institutional-table\">\n                      <thead>\n                        <tr>\n                          <th>Quarter</th>\n                          <th>Avg NOI</th>\n                          <th>vs Annual Avg</th>\n                          <th>Pattern</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>Q1 (Winter)</td>\n                          <td className=\"font-mono-data\">$6,425</td>\n                          <td className=\"font-mono-data text-red-600\">-6.3%</td>\n                          <td><span className=\"text-orange-600 font-bold\">HEATING COSTS</span></td>\n                        </tr>\n                        <tr>\n                          <td>Q2 (Spring)</td>\n                          <td className=\"font-mono-data\">$6,890</td>\n                          <td className=\"font-mono-data text-success-green\">+0.5%</td>\n                          <td><span className=\"text-success-green font-bold\">NORMAL</span></td>\n                        </tr>\n                        <tr>\n                          <td>Q3 (Summer)</td>\n                          <td className=\"font-mono-data\">$7,240</td>\n                          <td className=\"font-mono-data text-success-green\">+5.6%</td>\n                          <td><span className=\"text-success-green font-bold\">PEAK SEASON</span></td>\n                        </tr>\n                        <tr>\n                          <td>Q4 (Fall)</td>\n                          <td className=\"font-mono-data\">$6,980</td>\n                          <td className=\"font-mono-data text-success-green\">+1.8%</td>\n                          <td><span className=\"text-success-green font-bold\">STABLE</span></td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n                \n                <div className=\"overflow-hidden border-2 border-institutional-black\">\n                  <div className=\"bg-institutional-black text-institutional-white p-2\">\n                    <h4 className=\"font-bold text-xs uppercase\">Advanced Performance Statistics</h4>\n                  </div>\n                  <table className=\"institutional-table\">\n                    <thead>\n                      <tr>\n                        <th>Analysis Type</th>\n                        <th>Metric</th>\n                        <th>Value</th>\n                        <th>Market Percentile</th>\n                        <th>Risk Assessment</th>\n                        <th>Action Items</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>Risk-Adjusted Returns</td>\n                        <td>Sharpe Ratio (NOI)</td>\n                        <td className=\"font-mono-data font-bold\">1.87</td>\n                        <td className=\"font-mono-data text-success-green\">82nd</td>\n                        <td><span className=\"text-success-green font-bold\">LOW</span></td>\n                        <td>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            MONITOR\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Concentration Risk</td>\n                        <td>Single Tenant Max %</td>\n                        <td className=\"font-mono-data font-bold\">16.7%</td>\n                        <td className=\"font-mono-data text-success-green\">45th</td>\n                        <td><span className=\"text-success-green font-bold\">LOW</span></td>\n                        <td>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            MONITOR\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Predictive Forecasting</td>\n                        <td>12M NOI Forecast</td>\n                        <td className=\"font-mono-data font-bold text-success-green\">$85,200</td>\n                        <td className=\"font-mono-data\">N/A</td>\n                        <td><span className=\"text-success-green font-bold\">POSITIVE TREND</span></td>\n                        <td>\n                          <Button\n                            onClick={() => flagIssue('forecast-noi')}\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"bg-orange-500 hover:bg-orange-600 text-white text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            <Flag className=\"w-2 h-2 mr-0.5\" />\n                            TRACK\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Maintenance Correlation</td>\n                        <td>Weather Sensitivity</td>\n                        <td className=\"font-mono-data font-bold\">0.73</td>\n                        <td className=\"font-mono-data text-orange-600\">91st</td>\n                        <td><span className=\"text-orange-600 font-bold\">MEDIUM</span></td>\n                        <td>\n                          <Button\n                            onClick={() => flagIssue('weather-correlation')}\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"bg-orange-500 hover:bg-orange-600 text-white text-[8px] font-bold px-1.5 py-0 h-5\"\n                          >\n                            <Flag className=\"w-2 h-2 mr-0.5\" />\n                            REVIEW\n                          </Button>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                \n                {/* Detailed Asset Breakdown */}\n                <div className=\"mt-5 overflow-hidden border-2 border-institutional-black\">\n                  <div className=\"bg-institutional-black text-institutional-white p-2\">\n                    <h4 className=\"font-bold text-xs uppercase\">Detailed Asset Line Items</h4>\n                  </div>\n                  <table className=\"institutional-table\">\n                    <thead>\n                      <tr>\n                        <th>Asset Code</th>\n                        <th>Description</th>\n                        <th>Current Value</th>\n                        <th>Prior Period</th>\n                        <th>Variance</th>\n                        <th>Appreciation</th>\n                        <th>Risk Level</th>\n                        <th>Notes</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">1100</td>\n                        <td>Land Value</td>\n                        <td className=\"font-mono-data font-bold\">$850,000</td>\n                        <td className=\"font-mono-data\">$840,000</td>\n                        <td className=\"font-mono-data text-success-green\">+$10,000</td>\n                        <td className=\"font-mono-data text-success-green\">+1.2%</td>\n                        <td><span className=\"text-success-green font-bold\">LOW</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Market comp analysis...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">1200</td>\n                        <td>Building & Improvements</td>\n                        <td className=\"font-mono-data font-bold\">$1,990,000</td>\n                        <td className=\"font-mono-data\">$2,010,000</td>\n                        <td className=\"font-mono-data text-red-600\">-$20,000</td>\n                        <td className=\"font-mono-data text-red-600\">-1.0%</td>\n                        <td><span className=\"text-orange-600 font-bold\">MEDIUM</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Depreciation schedule...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">1110</td>\n                        <td>Operating Cash</td>\n                        <td className=\"font-mono-data font-bold\">$156,000</td>\n                        <td className=\"font-mono-data\">$142,000</td>\n                        <td className=\"font-mono-data text-success-green\">+$14,000</td>\n                        <td className=\"font-mono-data text-success-green\">+9.9%</td>\n                        <td><span className=\"text-success-green font-bold\">LOW</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Cash flow timing...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">1300</td>\n                        <td>Tenant Receivables</td>\n                        <td className=\"font-mono-data font-bold\">$21,800</td>\n                        <td className=\"font-mono-data\">$18,200</td>\n                        <td className=\"font-mono-data text-red-600\">+$3,600</td>\n                        <td className=\"font-mono-data text-red-600\">+19.8%</td>\n                        <td><span className=\"text-red-600 font-bold\">HIGH</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"Collections aging...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-mono-data font-bold text-center\">1400</td>\n                        <td>Security Deposits Held</td>\n                        <td className=\"font-mono-data font-bold\">$48,200</td>\n                        <td className=\"font-mono-data\">$47,800</td>\n                        <td className=\"font-mono-data text-success-green\">+$400</td>\n                        <td className=\"font-mono-data text-success-green\">+0.8%</td>\n                        <td><span className=\"text-success-green font-bold\">LOW</span></td>\n                        <td>\n                          <Input\n                            placeholder=\"New lease deposits...\"\n                            className=\"text-xs border-institutional-border h-6 px-2\"\n                          />\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                </div>\n              </TabsContent>\n\n              {/* Notes & Actions Tab */}\n              <TabsContent value=\"notes\" className=\"mt-0\">\n                <h3 className=\"text-lg font-bold uppercase text-institutional-black mb-4\">\n                  Action Items & Notes\n                </h3>\n                \n                <div className=\"grid grid-cols-2 gap-5\">\n                  <div>\n                    <h4 className=\"font-bold text-sm uppercase mb-3\">Open Action Items</h4>\n                    <div className=\"space-y-2\">\n                      {actionItems.map((item: ActionItem) => (\n                        <Card key={item.id} className=\"border border-institutional-border bg-institutional-accent\">\n                          <CardContent className=\"p-3\">\n                            <div className=\"text-sm font-bold\">{item.itemId}: Review Action Item</div>\n                            <div className=\"text-xs text-gray-600\">\n                              Property: S0010 | Priority: {item.priority} | Created: {new Date(item.createdAt).toLocaleDateString()}\n                            </div>\n                            <div className=\"text-sm mt-1\">{item.description}</div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-bold text-sm uppercase mb-3\">Recent Notes</h4>\n                    <div className=\"space-y-2\">\n                      {notes.map((note: Note) => (\n                        <Card key={note.id} className=\"border border-institutional-border bg-institutional-accent\">\n                          <CardContent className=\"p-3\">\n                            <div className=\"text-sm font-bold\">GL {note.cellId.replace('gl-', '')} Note</div>\n                            <div className=\"text-xs text-gray-600\">\n                              Added: {new Date(note.createdAt).toLocaleString()}\n                            </div>\n                            <div className=\"text-sm mt-1\">{note.text}</div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </Card>\n\n        {/* Export Summary */}\n        <Card className=\"bg-institutional-accent border-2 border-institutional-black\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex justify-between items-center\">\n              <div className=\"text-sm font-bold uppercase\">\n                Export Summary: <span>{notes.length}</span> Notes, <span>{actionItems.length}</span> Action Items\n              </div>\n              <div className=\"flex gap-3\">\n                <Button onClick={() => toast({ title: 'Report generated', variant: 'default' })} className=\"btn-institutional\">\n                  GENERATE REPORT\n                </Button>\n                <Button onClick={() => toast({ title: 'Summary emailed', variant: 'default' })} className=\"btn-secondary\">\n                  EMAIL SUMMARY\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":99057},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/excel-processor.ts":{"content":"import * as XLSX from 'xlsx';\nimport type { GLAccount, Property } from '@shared/schema';\n\nexport interface ProcessedExcelData {\n  properties: Partial<Property>[];\n  glAccounts: Partial<GLAccount>[];\n  sheets: string[];\n  rawData: any;\n}\n\nexport class ExcelProcessor {\n  private workbook: XLSX.WorkBook | null = null;\n\n  constructor() {}\n\n  async processFile(buffer: ArrayBuffer): Promise<ProcessedExcelData> {\n    try {\n      // Read the workbook\n      this.workbook = XLSX.read(buffer, { type: 'array' });\n      \n      if (!this.workbook) {\n        throw new Error('Failed to read Excel file');\n      }\n\n      const sheetNames = this.workbook.SheetNames;\n      const authoritativeSheets = sheetNames.filter(name => name.startsWith('>>'));\n      \n      if (authoritativeSheets.length === 0) {\n        throw new Error('No authoritative sheets found (sheets starting with >>)');\n      }\n\n      console.log('Found authoritative sheets:', authoritativeSheets);\n\n      const processedData: ProcessedExcelData = {\n        properties: [],\n        glAccounts: [],\n        sheets: sheetNames,\n        rawData: {}\n      };\n\n      // Process each authoritative sheet\n      for (const sheetName of authoritativeSheets) {\n        const worksheet = this.workbook.Sheets[sheetName];\n        if (!worksheet) continue;\n\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n        processedData.rawData[sheetName] = jsonData;\n\n        // Determine sheet type and process accordingly\n        if (sheetName.includes('Balance') || sheetName.includes('LastMnth') || sheetName.includes('T12')) {\n          await this.processFinancialSheet(jsonData, processedData, sheetName);\n        }\n      }\n\n      return processedData;\n    } catch (error) {\n      console.error('Excel processing error:', error);\n      throw new Error(`Failed to process Excel file: ${error.message}`);\n    }\n  }\n\n  private async processFinancialSheet(\n    data: any[][],\n    processedData: ProcessedExcelData,\n    sheetName: string\n  ): Promise<void> {\n    if (!data || data.length < 2) return;\n\n    // Look for property codes and GL account data\n    const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n\n    for (let i = 0; i < data.length; i++) {\n      const row = data[i];\n      if (!row || row.length < 2) continue;\n\n      // Check if this row contains a property code (e.g., S0010)\n      const propertyCode = this.extractPropertyCode(row);\n      if (propertyCode) {\n        // Process property data\n        const property = this.processPropertyRow(row, propertyCode);\n        if (property) {\n          processedData.properties.push(property);\n        }\n      }\n\n      // Check if this row contains GL account data\n      const glAccount = this.processGLAccountRow(row, currentMonth, sheetName);\n      if (glAccount) {\n        processedData.glAccounts.push(glAccount);\n      }\n    }\n  }\n\n  private extractPropertyCode(row: any[]): string | null {\n    for (const cell of row) {\n      if (typeof cell === 'string' && /^S\\d{4}$/.test(cell)) {\n        return cell;\n      }\n    }\n    return null;\n  }\n\n  private processPropertyRow(row: any[], code: string): Partial<Property> | null {\n    try {\n      // Look for common property data patterns\n      const property: Partial<Property> = {\n        code,\n        name: this.extractPropertyName(row),\n        units: this.extractNumericValue(row, 'units'),\n        monthlyNOI: this.extractNumericValue(row, 'noi'),\n        occupancy: this.extractPercentValue(row, 'occupancy'),\n        revenuePerUnit: this.extractNumericValue(row, 'revenue')\n      };\n\n      // Only return if we found some meaningful data\n      if (property.name || property.units || property.monthlyNOI) {\n        return property;\n      }\n    } catch (error) {\n      console.warn('Error processing property row:', error);\n    }\n    return null;\n  }\n\n  private processGLAccountRow(row: any[], month: string, sheetName: string): Partial<GLAccount> | null {\n    try {\n      // Look for GL account codes (4-digit numbers starting with 4, 5, or 6)\n      let glCode: string | null = null;\n      let description: string | null = null;\n      let amount: number | null = null;\n\n      for (let i = 0; i < row.length; i++) {\n        const cell = row[i];\n        \n        // Check for GL code\n        if (typeof cell === 'string' && /^[4-6]\\d{3}$/.test(cell)) {\n          glCode = cell;\n          // Description might be in the next cell\n          if (i + 1 < row.length && typeof row[i + 1] === 'string') {\n            description = row[i + 1];\n          }\n        }\n        \n        // Check for numeric amounts\n        if (typeof cell === 'number' && Math.abs(cell) > 0) {\n          amount = cell;\n        }\n      }\n\n      if (glCode && amount !== null) {\n        const type = this.determineAccountType(glCode);\n        return {\n          code: glCode,\n          description: description || this.getDefaultDescription(glCode),\n          amount: Math.abs(amount), // Store as positive, type determines revenue vs expense\n          type,\n          month\n        };\n      }\n    } catch (error) {\n      console.warn('Error processing GL account row:', error);\n    }\n    return null;\n  }\n\n  private extractPropertyName(row: any[]): string | undefined {\n    for (const cell of row) {\n      if (typeof cell === 'string' && cell.includes('Maple')) {\n        return cell;\n      }\n    }\n    return undefined;\n  }\n\n  private extractNumericValue(row: any[], context: string): number | undefined {\n    // Simple heuristic to find relevant numeric values\n    const numbers = row.filter(cell => typeof cell === 'number' && cell > 0);\n    if (numbers.length > 0) {\n      // Return the first reasonable number based on context\n      if (context === 'units') {\n        return numbers.find(n => n < 100) || numbers[0]; // Units typically < 100\n      } else if (context === 'noi') {\n        return numbers.find(n => n > 1000) || numbers[0]; // NOI typically > 1000\n      } else if (context === 'revenue') {\n        return numbers.find(n => n > 500 && n < 5000) || numbers[0]; // Revenue per unit range\n      }\n    }\n    return undefined;\n  }\n\n  private extractPercentValue(row: any[], context: string): number | undefined {\n    for (const cell of row) {\n      if (typeof cell === 'number' && cell > 0 && cell <= 1) {\n        return cell * 100; // Convert decimal to percentage\n      } else if (typeof cell === 'number' && cell > 0 && cell <= 100) {\n        return cell; // Already a percentage\n      }\n    }\n    return undefined;\n  }\n\n  private determineAccountType(glCode: string): 'revenue' | 'expense' {\n    const firstDigit = glCode.charAt(0);\n    return firstDigit === '4' ? 'revenue' : 'expense';\n  }\n\n  private getDefaultDescription(glCode: string): string {\n    const descriptions: Record<string, string> = {\n      '4105': 'Rent Income',\n      '4110': 'Section 8 Rent',\n      '6105': 'Property Management',\n      '6110': 'Maintenance & Repairs',\n      '6120': 'Utilities',\n      '6130': 'Property Insurance',\n      '6140': 'Property Taxes'\n    };\n    return descriptions[glCode] || `GL Account ${glCode}`;\n  }\n\n  getSheetNames(): string[] {\n    return this.workbook ? this.workbook.SheetNames : [];\n  }\n\n  getSheetData(sheetName: string): any[][] | null {\n    if (!this.workbook || !this.workbook.Sheets[sheetName]) {\n      return null;\n    }\n    return XLSX.utils.sheet_to_json(this.workbook.Sheets[sheetName], { header: 1 });\n  }\n}\n\nexport const excelProcessor = new ExcelProcessor();\n","size_bytes":7474},"client/src/lib/export-utils.ts":{"content":"import * as XLSX from 'xlsx';\nimport type { Portfolio, Property, GLAccount, Note, ActionItem } from '@shared/schema';\n\nexport interface LenderPackageData {\n  portfolio: Portfolio;\n  properties: Property[];\n  exportDate: string;\n  exportType: string;\n}\n\nexport interface ExcelExportData {\n  portfolio: Portfolio;\n  properties: Property[];\n  glAccounts: GLAccount[];\n  notes: Note[];\n  actionItems: ActionItem[];\n  exportDate: string;\n  exportType: string;\n}\n\nexport class ExportUtils {\n  \n  static async generateLenderPackage(data: LenderPackageData): Promise<Blob> {\n    try {\n      // Create workbook\n      const wb = XLSX.utils.book_new();\n      \n      // Portfolio Summary Sheet\n      const portfolioData = [\n        ['Stanton Management LLC - Lender Package'],\n        ['Generated:', new Date(data.exportDate).toLocaleString()],\n        [''],\n        ['Portfolio Summary'],\n        ['Name', data.portfolio.name],\n        ['Total Units', data.portfolio.totalUnits],\n        ['Total NOI', `$${data.portfolio.totalNOI.toLocaleString()}`],\n        ['Cap Rate', `${data.portfolio.capRate}%`],\n        [''],\n        ['Property Details']\n      ];\n\n      // Add property headers\n      portfolioData.push([\n        'Property Code',\n        'Property Name', \n        'Units',\n        'Monthly NOI',\n        'NOI Margin',\n        'Occupancy',\n        'Revenue/Unit',\n        'Cap Rate',\n        'DSCR'\n      ]);\n\n      // Add property data\n      data.properties.forEach(property => {\n        portfolioData.push([\n          property.code,\n          property.name,\n          property.units,\n          property.monthlyNOI,\n          `${property.noiMargin}%`,\n          `${property.occupancy}%`,\n          property.revenuePerUnit,\n          `${property.capRate}%`,\n          property.dscr\n        ]);\n      });\n\n      const portfolioWS = XLSX.utils.aoa_to_sheet(portfolioData);\n      XLSX.utils.book_append_sheet(wb, portfolioWS, 'Portfolio Summary');\n\n      // Generate buffer and return as blob\n      const buffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n      return new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n\n    } catch (error) {\n      console.error('Error generating lender package:', error);\n      throw new Error('Failed to generate lender package');\n    }\n  }\n\n  static async generateExcelExport(data: ExcelExportData): Promise<Blob> {\n    try {\n      const wb = XLSX.utils.book_new();\n\n      // Portfolio Summary Sheet\n      const portfolioData = [\n        ['Stanton Management LLC - Financial Report'],\n        ['Generated:', new Date(data.exportDate).toLocaleString()],\n        [''],\n        ['Portfolio:', data.portfolio.name],\n        ['Total Units:', data.portfolio.totalUnits],\n        ['Total NOI:', `$${data.portfolio.totalNOI.toLocaleString()}`],\n        ['Cap Rate:', `${data.portfolio.capRate}%`],\n        ['']\n      ];\n\n      const portfolioWS = XLSX.utils.aoa_to_sheet(portfolioData);\n      XLSX.utils.book_append_sheet(wb, portfolioWS, 'Summary');\n\n      // GL Accounts Sheet\n      const glHeaders = ['Property Code', 'GL Code', 'Description', 'Amount', 'Type', 'Month'];\n      const glData = [glHeaders];\n      \n      data.glAccounts.forEach(account => {\n        const property = data.properties.find(p => p.id === account.propertyId);\n        glData.push([\n          property?.code || 'Unknown',\n          account.code,\n          account.description,\n          account.type === 'revenue' ? account.amount : -account.amount,\n          account.type.toUpperCase(),\n          account.month\n        ]);\n      });\n\n      const glWS = XLSX.utils.aoa_to_sheet(glData);\n      XLSX.utils.book_append_sheet(wb, glWS, 'GL Accounts');\n\n      // Notes Sheet\n      if (data.notes.length > 0) {\n        const notesHeaders = ['Property Code', 'Cell ID', 'Note', 'Author', 'Date'];\n        const notesData = [notesHeaders];\n        \n        data.notes.forEach(note => {\n          const property = data.properties.find(p => p.id === note.propertyId);\n          notesData.push([\n            property?.code || 'Unknown',\n            note.cellId,\n            note.text,\n            note.author,\n            note.createdAt.toLocaleString()\n          ]);\n        });\n\n        const notesWS = XLSX.utils.aoa_to_sheet(notesData);\n        XLSX.utils.book_append_sheet(wb, notesWS, 'Notes');\n      }\n\n      // Action Items Sheet\n      if (data.actionItems.length > 0) {\n        const actionHeaders = ['Item ID', 'Property Code', 'Description', 'Priority', 'Status', 'Created Date'];\n        const actionData = [actionHeaders];\n        \n        data.actionItems.forEach(item => {\n          const property = data.properties.find(p => p.id === item.propertyId);\n          actionData.push([\n            item.itemId,\n            property?.code || 'Unknown',\n            item.description,\n            item.priority,\n            item.status,\n            item.createdAt.toLocaleString()\n          ]);\n        });\n\n        const actionWS = XLSX.utils.aoa_to_sheet(actionData);\n        XLSX.utils.book_append_sheet(wb, actionWS, 'Action Items');\n      }\n\n      // Generate buffer and return as blob\n      const buffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n      return new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n\n    } catch (error) {\n      console.error('Error generating Excel export:', error);\n      throw new Error('Failed to generate Excel export');\n    }\n  }\n\n  static downloadBlob(blob: Blob, filename: string): void {\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n\n  static async exportLenderPackage(portfolioKey: string = 'hartford1'): Promise<void> {\n    try {\n      const response = await fetch(`/api/export/lender-package?portfolioKey=${portfolioKey}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch lender package data');\n      }\n      \n      const data: LenderPackageData = await response.json();\n      const blob = await this.generateLenderPackage(data);\n      const filename = `${data.portfolio.name}_Lender_Package_${new Date().toISOString().slice(0, 10)}.xlsx`;\n      \n      this.downloadBlob(blob, filename);\n    } catch (error) {\n      console.error('Error exporting lender package:', error);\n      throw error;\n    }\n  }\n\n  static async exportToExcel(portfolioKey: string = 'hartford1'): Promise<void> {\n    try {\n      const response = await fetch(`/api/export/excel-data?portfolioKey=${portfolioKey}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch export data');\n      }\n      \n      const data: ExcelExportData = await response.json();\n      const blob = await this.generateExcelExport(data);\n      const filename = `${data.portfolio.name}_Financial_Report_${new Date().toISOString().slice(0, 10)}.xlsx`;\n      \n      this.downloadBlob(blob, filename);\n    } catch (error) {\n      console.error('Error exporting to Excel:', error);\n      throw error;\n    }\n  }\n}\n","size_bytes":7171},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { PropertyDashboard } from '@/components/property-dashboard';\n\nexport default function Dashboard() {\n  return <PropertyDashboard />;\n}\n","size_bytes":142},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/excel-template-generator.ts":{"content":"import * as XLSX from 'xlsx';\n\n// Template structure for Hartford 1 property data\nexport interface PropertyData {\n  propertyCode: string;\n  propertyName: string;\n  portfolioName: string;\n  glAccounts: GLAccountData[];\n}\n\nexport interface GLAccountData {\n  code: string;\n  description: string;\n  currentMonth: number;\n  priorMonth: number;\n  ytd: number;\n  budget: number;\n  type: 'revenue' | 'expense';\n  category: string;\n}\n\nexport function generateExcelTemplate(): ArrayBuffer {\n  const workbook = XLSX.utils.book_new();\n  \n  // Property Information Sheet\n  const propertyInfo = [\n    ['Property Management Dashboard - Data Input Template', '', '', ''],\n    ['', '', '', ''],\n    ['Property Information', '', '', ''],\n    ['Property Code', 'S0010', '', ''],\n    ['Property Name', '228 Maple', '', ''],\n    ['Portfolio', 'Hartford 1', '', ''],\n    ['Units', '6', '', ''],\n    ['Last Updated', new Date().toISOString().split('T')[0], '', ''],\n    ['', '', '', ''],\n    ['Instructions:', '', '', ''],\n    ['1. Fill in the GL Account Data sheet with your financial data', '', '', ''],\n    ['2. Use exact GL codes (4105, 6110, etc.)', '', '', ''],\n    ['3. Amounts should be positive numbers', '', '', ''],\n    ['4. Type should be \"revenue\" or \"expense\"', '', '', ''],\n    ['5. Save file and upload to dashboard', '', '', '']\n  ];\n  \n  const propertyInfoWS = XLSX.utils.aoa_to_sheet(propertyInfo);\n  XLSX.utils.book_append_sheet(workbook, propertyInfoWS, 'Property Info');\n  \n  // GL Account Template Sheet\n  const glAccountTemplate = [\n    ['GL Code', 'Description', 'Current Month', 'Prior Month', 'YTD', 'Budget', 'Type', 'Category'],\n    ['4105', 'Rental Income - Gross', 10200, 9950, 121800, 118500, 'revenue', 'Income'],\n    ['4110', 'Section 8 Housing Assistance', 300, 300, 3600, 3600, 'revenue', 'Income'],\n    ['4120', 'Other Income', 180, 85, 1425, 1200, 'revenue', 'Income'],\n    ['6105', 'Property Management Fee', 525, 517, 6263, 6000, 'expense', 'Management'],\n    ['6110', 'Maintenance & Repairs', 1950, 1420, 18750, 15000, 'expense', 'Maintenance'],\n    ['6115', 'Landscaping & Grounds', 285, 200, 2850, 2400, 'expense', 'Maintenance'],\n    ['6120', 'Utilities - Common Areas', 420, 390, 4680, 4800, 'expense', 'Utilities'],\n    ['6125', 'Trash & Recycling', 125, 85, 1275, 1200, 'expense', 'Utilities'],\n    ['6130', 'Property Insurance', 285, 285, 3420, 3420, 'expense', 'Insurance'],\n    ['6140', 'Real Estate Taxes', 815, 815, 9780, 9780, 'expense', 'Taxes'],\n    ['6150', 'Legal & Professional', 150, 200, 1950, 2400, 'expense', 'Administrative'],\n    ['6160', 'Office & Administrative', 75, 45, 720, 600, 'expense', 'Administrative']\n  ];\n  \n  const glAccountWS = XLSX.utils.aoa_to_sheet(glAccountTemplate);\n  \n  // Set column widths\n  glAccountWS['!cols'] = [\n    { wch: 10 }, // GL Code\n    { wch: 25 }, // Description\n    { wch: 15 }, // Current Month\n    { wch: 15 }, // Prior Month\n    { wch: 15 }, // YTD\n    { wch: 15 }, // Budget\n    { wch: 12 }, // Type\n    { wch: 15 }  // Category\n  ];\n  \n  XLSX.utils.book_append_sheet(workbook, glAccountWS, 'GL Account Data');\n  \n  // Balance Sheet Template\n  const balanceSheetTemplate = [\n    ['Account Category', 'Account Name', 'Account Code', 'Current Balance', 'Prior Balance', 'Type'],\n    ['ASSETS', '', '', '', '', ''],\n    ['Current Assets', 'Cash & Equivalents', '1100', 156000, 142000, 'asset'],\n    ['Current Assets', 'Accounts Receivable', '1200', 12500, 8900, 'asset'],\n    ['Current Assets', 'Prepaid Expenses', '1300', 8500, 7200, 'asset'],\n    ['Fixed Assets', 'Property Value (Appraised)', '1500', 2840000, 2840000, 'asset'],\n    ['Fixed Assets', 'Equipment & Fixtures', '1600', 45000, 48000, 'asset'],\n    ['Fixed Assets', 'Accumulated Depreciation', '1650', -125000, -118000, 'asset'],\n    ['', '', '', '', '', ''],\n    ['LIABILITIES', '', '', '', '', ''],\n    ['Current Liabilities', 'Accounts Payable', '2100', 8500, 6200, 'liability'],\n    ['Current Liabilities', 'Security Deposits', '2200', 10400, 10400, 'liability'],\n    ['Long-term Debt', 'Mortgage Payable', '2500', 1850000, 1865000, 'liability'],\n    ['', '', '', '', '', ''],\n    ['EQUITY', '', '', '', '', ''],\n    ['Owner Equity', 'Owner Contributions', '3100', 450000, 450000, 'equity'],\n    ['Owner Equity', 'Retained Earnings', '3200', 634000, 595900, 'equity']\n  ];\n  \n  const balanceSheetWS = XLSX.utils.aoa_to_sheet(balanceSheetTemplate);\n  balanceSheetWS['!cols'] = [\n    { wch: 18 }, // Account Category\n    { wch: 25 }, // Account Name\n    { wch: 12 }, // Account Code\n    { wch: 15 }, // Current Balance\n    { wch: 15 }, // Prior Balance\n    { wch: 12 }  // Type\n  ];\n  \n  XLSX.utils.book_append_sheet(workbook, balanceSheetWS, 'Balance Sheet');\n  \n  return XLSX.write(workbook, { type: 'array', bookType: 'xlsx' });\n}\n\nexport function downloadExcelTemplate() {\n  const buffer = generateExcelTemplate();\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  const url = URL.createObjectURL(blob);\n  \n  const link = document.createElement('a');\n  link.href = url;\n  link.download = `Hartford-1-Data-Template-${new Date().toISOString().split('T')[0]}.xlsx`;\n  link.click();\n  \n  URL.revokeObjectURL(url);\n}","size_bytes":5227}}}